(function(window, angular) {
    'use strict';

    angular.module('app', [
        'ngRoute', 'ui.bootstrap',
        'app.core', 'app.wallet'
    ]).config(appConfig);

    appConfig.$inject = ['$compileProvider'];



    function appConfig ($compileProvider) {
        $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|bitcoin):/);
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('bitcoin', ['app.util']);

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.core', ['hid']);

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('hid', ['app.util', 'bitcoin']);

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.util', ['ngToast', 'ipCookie']);

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet', [
        'hid', 'bitcoin', 'app.util',
        'monospaced.qrcode' // https://github.com/monospaced/angular-qrcode
    ]);

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app')
        .config(config);

    config.$inject = ['$routeProvider', '$locationProvider'];

    function config($routeProvider, $locationProvider) {
        $locationProvider.html5Mode(true).hashPrefix('!');
        $routeProvider.otherwise('/bitlox_hardware_wallet');
        $routeProvider.when('/bitlox_hardware_wallet', {
            controller: 'WalletCtrl',
            controllerAs: 'vm',
            templateUrl: 'bitlox_hardware_wallet/wallet/wallets.html'
        });

//         $routeProvider.when('/', {
//             templateUrl: 'core/landing.html'
//         });
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('bitcoin')
        .factory('addressInfo', addressInfoFactory);

    addressInfoFactory.$inject = [
        '$q',
        '$http',
        'hexUtil',
    ];

    function addressInfoFactory($q, $http, hexUtil) {

        var baseUrl = 'https://bitlox.io/api';
//         var baseUrl = '/api';

        var addressInfo = {};

        addressInfo.getReceived = function(address) {
            return $http.get(baseUrl + '/addr/' + address).then(function(res) {
                return res.data;
            }, function(err) {
                if (err.status === 404) {
                    return {
                        received: 0,
                        balance: 0,
                        unconfirmed_sent: 0,
                        unconfirmed_received: 0,
                        unconfirmed_balance: 0
                    };
                } else {
                    return $q.reject(err.data);
                }
            });
        };

        addressInfo.getUnspent = function(address) {
//             return $http.get(baseUrl + '/' + address + '/unspent_outputs').then(function(res) {
            return $http.get(baseUrl + '/addr/' + address + '/utxo').then(function(res) {
                var outs = res.data;
                outs.forEach(function(out) {
                    // make this data just loke blockchain.info's
//                     var hash = out.tx_hash_big_endian = out.transaction_hash;
//                     out.tx_hash = hexUtil.makeStringSmallEndian(hash);
//                     out.value = out.amount;
//                     out.script = out.script_hex;
//                     out.tx_output_n = out.output_index;
//                     var hash = out.tx_hash_big_endian = out.txid;
                    var hash = out.tx_hash_big_endian = out.txid;
                    out.tx_hash = hexUtil.makeStringSmallEndian(hash);
                    out.value = out.amount * 100000000;
                    out.script = out.scriptPubKey;
                    out.tx_output_n = out.vout;
                });
                return outs;
            }, function(err) {
                if (err.status === 404) {
                    return [];
                }
                return $q.reject(err.data);
            });
        };

//         addressInfo.getTransactions = function(address) {
// //             return $http.get(baseUrl + '/' + address + '/transactions').then(function(res) {
//             return $http.get(baseUrl + '/txs/?address=' + address ).then(function(res) {
//                 var txs = res.data.transactions;
//                 txs = txs.concat(res.data.unconfirmed_transactions);
//                 return txs;
//             }, function(err) {
//                 if (err.status === 404) {
//                     return [];
//                 } else {
//                     return $q.reject(err.data);
//                 }
//             });
//         };
        addressInfo.getTransactions = function(address) {
//             return $http.get(baseUrl + '/' + address + '/transactions').then(function(res) {
            return $http.get(baseUrl + '/txs/?address=' + address ).then(function(res) {
                var txs = res.data.txs;
//                 txs = txs.concat(res.data.unconfirmed_transactions);
                return txs;
            }, function(err) {
                if (err.status === 404) {
                    return [];
                } else {
                    return $q.reject(err.data);
                }
            });
        };

        return addressInfo;
    }

})(window, window.angular);

(function(window, angular, BigNumber) {
    'use strict';

    angular.module('bitcoin')
        .factory('bcMath', bcMathFactory);

    bcMathFactory.$inject = ['COIN'];

    function bcMathFactory(COIN) {

        var bcMath = {
            satoshiToBTC: satoshiToBTC,
            toBTC: satoshiToBTC,
            btcToSatoshi: btcToSatoshi,
            toSatoshi: btcToSatoshi
        };

        var bitcoin = new BigNumber(COIN);

        return bcMath;

        function satoshiToBTC(satoshi) {
            return new BigNumber(satoshi).dividedBy(bitcoin).toNumber();
        }

        function btcToSatoshi(btc) {
            return new BigNumber(btc).times(bitcoin).toNumber();
        }
    }

})(window, window.angular, window.BigNumber);

(function(window, angular) {
    'use strict';

    angular.module('bitcoin')
        .filter('bcNumber', bcNumberFactory);

    bcNumberFactory.$inject = ['$filter'];

    function bcNumberFactory($filter) {
        var filter = $filter('number');
        var replace = /\.?0+$/;
        return function bcNumber(input) {
            var output = filter(input, 8);
            return output.replace(replace, '');
        };
    }

})(window, window.angular);

(function(window, angular, Bitcoin, BIP32) {
    'use strict';

    angular.module('bitcoin')
        .factory('BIP32', Bip32Factory);

    Bip32Factory.$inject = [
        'MAINNET_PUBLIC',
        'MAINNET_PRIVATE',
        'TESTNET_PUBLIC',
        'TESTNET_PRIVATE',
        'RECEIVE_CHAIN',
        'CHANGE_CHAIN',
        'GAP'
    ];

    function Bip32Factory(MAINNET_PUBLIC, MAINNET_PRIVATE,
                          TESTNET_PUBLIC, TESTNET_PRIVATE,
                          RECEIVE_CHAIN, CHANGE_CHAIN, GAP) {

        var Bip32 = function(xpub) {
            var bip32 = this;
            var key = bip32.key = new BIP32(xpub);
            switch (key.version) {
            case MAINNET_PUBLIC:
                bip32.keylabel = "Public key";
                bip32.network = 'prod';
                bip32.networklabel = "Bitcoin Mainnet";
                break;
            case MAINNET_PRIVATE:
                bip32.keylabel = "Private key";
                bip32.network = 'prod';
                bip32.networklabel = "Bitcoin Mainnet";
                break;
            case TESTNET_PUBLIC:
                bip32.keylabel = "Public key";
                bip32.network = 'test';
                bip32.networklabel = "Bitcoin Testnet";
                break;
            case TESTNET_PRIVATE:
                bip32.keylabel = "Private key";
                bip32.network = 'test';
                bip32.networklabel = "Bitcoin Testnet";
                break;
            default:
                throw new Error("Unknown key version");
            }
            Bitcoin.setNetwork(bip32.network);

            bip32.chains = {
                receive: key.derive_child(RECEIVE_CHAIN),
                change: key.derive_child(CHANGE_CHAIN)
            };

            bip32.keyCount = {
                receive: GAP,
                change: GAP
            };
        };

        Bip32.prototype.generateAddress = function(chain, index) {
            var bip32 = this;
            if (!bip32.chains[chain]) {
                throw new Error("Invalid chain");
            }
            var address = {};
            var childKey = bip32.chains[chain].derive_child(index);
            var childAddr = childKey.eckey.getBitcoinAddress().toString();
            address.pub = childAddr;
            address.key = childKey;
            return address;
        };

        Bip32.prototype.generateAddresses = function(chain) {
            var bip32 = this;
            if (!bip32.chains[chain]) {
                throw new Error("Invalid chain");
            }
            var addresses = {};
            for (var i = 0; i < bip32.keyCount[chain]; i++) {
                var address = bip32.generateAddress(chain, i);
                addresses[address.pub] = address;
            }
            return addresses;
        };

        return Bip32;

    }

})(window, window.angular, window.Bitcoin, window.BIP32);

(function(window, angular) {
    'use strict';

    angular.module('bitcoin')
        .constant('BIP39WordList', [
            "abandon", "ability", "able", "about", "above", "absent",
            "absorb", "abstract", "absurd", "abuse", "access", "accident",
            "account", "accuse", "achieve", "acid", "acoustic", "acquire",
            "across", "act", "action", "actor", "actress", "actual",
            "adapt", "add", "addict", "address", "adjust", "admit",
            "adult", "advance", "advice", "aerobic", "affair", "afford",
            "afraid", "again", "age", "agent", "agree", "ahead",
            "aim", "air", "airport", "aisle", "alarm", "album",
            "alcohol", "alert", "alien", "all", "alley", "allow",
            "almost", "alone", "alpha", "already", "also", "alter",
            "always", "amateur", "amazing", "among", "amount", "amused",
            "analyst", "anchor", "ancient", "anger", "angle", "angry",
            "animal", "ankle", "announce", "annual", "another", "answer",
            "antenna", "antique", "anxiety", "any", "apart", "apology",
            "appear", "apple", "approve", "april", "arch", "arctic",
            "area", "arena", "argue", "arm", "armed", "armor",
            "army", "around", "arrange", "arrest", "arrive", "arrow",
            "art", "artefact", "artist", "artwork", "ask", "aspect",
            "assault", "asset", "assist", "assume", "asthma", "athlete",
            "atom", "attack", "attend", "attitude", "attract", "auction",
            "audit", "august", "aunt", "author", "auto", "autumn",
            "average", "avocado", "avoid", "awake", "aware", "away",
            "awesome", "awful", "awkward", "axis", "baby", "bachelor",
            "bacon", "badge", "bag", "balance", "balcony", "ball",
            "bamboo", "banana", "banner", "bar", "barely", "bargain",
            "barrel", "base", "basic", "basket", "battle", "beach",
            "bean", "beauty", "because", "become", "beef", "before",
            "begin", "behave", "behind", "believe", "below", "belt",
            "bench", "benefit", "best", "betray", "better", "between",
            "beyond", "bicycle", "bid", "bike", "bind", "biology",
            "bird", "birth", "bitter", "black", "blade", "blame",
            "blanket", "blast", "bleak", "bless", "blind", "blood",
            "blossom", "blouse", "blue", "blur", "blush", "board",
            "boat", "body", "boil", "bomb", "bone", "bonus",
            "book", "boost", "border", "boring", "borrow", "boss",
            "bottom", "bounce", "box", "boy", "bracket", "brain",
            "brand", "brass", "brave", "bread", "breeze", "brick",
            "bridge", "brief", "bright", "bring", "brisk", "broccoli",
            "broken", "bronze", "broom", "brother", "brown", "brush",
            "bubble", "buddy", "budget", "buffalo", "build", "bulb",
            "bulk", "bullet", "bundle", "bunker", "burden", "burger",
            "burst", "bus", "business", "busy", "butter", "buyer",
            "buzz", "cabbage", "cabin", "cable", "cactus", "cage",
            "cake", "call", "calm", "camera", "camp", "can",
            "canal", "cancel", "candy", "cannon", "canoe", "canvas",
            "canyon", "capable", "capital", "captain", "car", "carbon",
            "card", "cargo", "carpet", "carry", "cart", "case",
            "cash", "casino", "castle", "casual", "cat", "catalog",
            "catch", "category", "cattle", "caught", "cause", "caution",
            "cave", "ceiling", "celery", "cement", "census", "century",
            "cereal", "certain", "chair", "chalk", "champion", "change",
            "chaos", "chapter", "charge", "chase", "chat", "cheap",
            "check", "cheese", "chef", "cherry", "chest", "chicken",
            "chief", "child", "chimney", "choice", "choose", "chronic",
            "chuckle", "chunk", "churn", "cigar", "cinnamon", "circle",
            "citizen", "city", "civil", "claim", "clap", "clarify",
            "claw", "clay", "clean", "clerk", "clever", "click",
            "client", "cliff", "climb", "clinic", "clip", "clock",
            "clog", "close", "cloth", "cloud", "clown", "club",
            "clump", "cluster", "clutch", "coach", "coast", "coconut",
            "code", "coffee", "coil", "coin", "collect", "color",
            "column", "combine", "come", "comfort", "comic", "common",
            "company", "concert", "conduct", "confirm", "congress", "connect",
            "consider", "control", "convince", "cook", "cool", "copper",
            "copy", "coral", "core", "corn", "correct", "cost",
            "cotton", "couch", "country", "couple", "course", "cousin",
            "cover", "coyote", "crack", "cradle", "craft", "cram",
            "crane", "crash", "crater", "crawl", "crazy", "cream",
            "credit", "creek", "crew", "cricket", "crime", "crisp",
            "critic", "crop", "cross", "crouch", "crowd", "crucial",
            "cruel", "cruise", "crumble", "crunch", "crush", "cry",
            "crystal", "cube", "culture", "cup", "cupboard", "curious",
            "current", "curtain", "curve", "cushion", "custom", "cute",
            "cycle", "dad", "damage", "damp", "dance", "danger",
            "daring", "dash", "daughter", "dawn", "day", "deal",
            "debate", "debris", "decade", "december", "decide", "decline",
            "decorate", "decrease", "deer", "defense", "define", "defy",
            "degree", "delay", "deliver", "demand", "demise", "denial",
            "dentist", "deny", "depart", "depend", "deposit", "depth",
            "deputy", "derive", "describe", "desert", "design", "desk",
            "despair", "destroy", "detail", "detect", "develop", "device",
            "devote", "diagram", "dial", "diamond", "diary", "dice",
            "diesel", "diet", "differ", "digital", "dignity", "dilemma",
            "dinner", "dinosaur", "direct", "dirt", "disagree", "discover",
            "disease", "dish", "dismiss", "disorder", "display", "distance",
            "divert", "divide", "divorce", "dizzy", "doctor", "document",
            "dog", "doll", "dolphin", "domain", "donate", "donkey",
            "donor", "door", "dose", "double", "dove", "draft",
            "dragon", "drama", "drastic", "draw", "dream", "dress",
            "drift", "drill", "drink", "drip", "drive", "drop",
            "drum", "dry", "duck", "dumb", "dune", "during",
            "dust", "dutch", "duty", "dwarf", "dynamic", "eager",
            "eagle", "early", "earn", "earth", "easily", "east",
            "easy", "echo", "ecology", "economy", "edge", "edit",
            "educate", "effort", "egg", "eight", "either", "elbow",
            "elder", "electric", "elegant", "element", "elephant", "elevator",
            "elite", "else", "embark", "embody", "embrace", "emerge",
            "emotion", "employ", "empower", "empty", "enable", "enact",
            "end", "endless", "endorse", "enemy", "energy", "enforce",
            "engage", "engine", "enhance", "enjoy", "enlist", "enough",
            "enrich", "enroll", "ensure", "enter", "entire", "entry",
            "envelope", "episode", "equal", "equip", "era", "erase",
            "erode", "erosion", "error", "erupt", "escape", "essay",
            "essence", "estate", "eternal", "ethics", "evidence", "evil",
            "evoke", "evolve", "exact", "example", "excess", "exchange",
            "excite", "exclude", "excuse", "execute", "exercise", "exhaust",
            "exhibit", "exile", "exist", "exit", "exotic", "expand",
            "expect", "expire", "explain", "expose", "express", "extend",
            "extra", "eye", "eyebrow", "fabric", "face", "faculty",
            "fade", "faint", "faith", "fall", "false", "fame",
            "family", "famous", "fan", "fancy", "fantasy", "farm",
            "fashion", "fat", "fatal", "father", "fatigue", "fault",
            "favorite", "feature", "february", "federal", "fee", "feed",
            "feel", "female", "fence", "festival", "fetch", "fever",
            "few", "fiber", "fiction", "field", "figure", "file",
            "film", "filter", "final", "find", "fine", "finger",
            "finish", "fire", "firm", "first", "fiscal", "fish",
            "fit", "fitness", "fix", "flag", "flame", "flash",
            "flat", "flavor", "flee", "flight", "flip", "float",
            "flock", "floor", "flower", "fluid", "flush", "fly",
            "foam", "focus", "fog", "foil", "fold", "follow",
            "food", "foot", "force", "forest", "forget", "fork",
            "fortune", "forum", "forward", "fossil", "foster", "found",
            "fox", "fragile", "frame", "frequent", "fresh", "friend",
            "fringe", "frog", "front", "frost", "frown", "frozen",
            "fruit", "fuel", "fun", "funny", "furnace", "fury",
            "future", "gadget", "gain", "galaxy", "gallery", "game",
            "gap", "garage", "garbage", "garden", "garlic", "garment",
            "gas", "gasp", "gate", "gather", "gauge", "gaze",
            "general", "genius", "genre", "gentle", "genuine", "gesture",
            "ghost", "giant", "gift", "giggle", "ginger", "giraffe",
            "girl", "give", "glad", "glance", "glare", "glass",
            "glide", "glimpse", "globe", "gloom", "glory", "glove",
            "glow", "glue", "goat", "goddess", "gold", "good",
            "goose", "gorilla", "gospel", "gossip", "govern", "gown",
            "grab", "grace", "grain", "grant", "grape", "grass",
            "gravity", "great", "green", "grid", "grief", "grit",
            "grocery", "group", "grow", "grunt", "guard", "guess",
            "guide", "guilt", "guitar", "gun", "gym", "habit",
            "hair", "half", "hammer", "hamster", "hand", "happy",
            "harbor", "hard", "harsh", "harvest", "hat", "have",
            "hawk", "hazard", "head", "health", "heart", "heavy",
            "hedgehog", "height", "hello", "helmet", "help", "hen",
            "hero", "hidden", "high", "hill", "hint", "hip",
            "hire", "history", "hobby", "hockey", "hold", "hole",
            "holiday", "hollow", "home", "honey", "hood", "hope",
            "horn", "horror", "horse", "hospital", "host", "hotel",
            "hour", "hover", "hub", "huge", "human", "humble",
            "humor", "hundred", "hungry", "hunt", "hurdle", "hurry",
            "hurt", "husband", "hybrid", "ice", "icon", "idea",
            "identify", "idle", "ignore", "ill", "illegal", "illness",
            "image", "imitate", "immense", "immune", "impact", "impose",
            "improve", "impulse", "inch", "include", "income", "increase",
            "index", "indicate", "indoor", "industry", "infant", "inflict",
            "inform", "inhale", "inherit", "initial", "inject", "injury",
            "inmate", "inner", "innocent", "input", "inquiry", "insane",
            "insect", "inside", "inspire", "install", "intact", "interest",
            "into", "invest", "invite", "involve", "iron", "island",
            "isolate", "issue", "item", "ivory", "jacket", "jaguar",
            "jar", "jazz", "jealous", "jeans", "jelly", "jewel",
            "job", "join", "joke", "journey", "joy", "judge",
            "juice", "jump", "jungle", "junior", "junk", "just",
            "kangaroo", "keen", "keep", "ketchup", "key", "kick",
            "kid", "kidney", "kind", "kingdom", "kiss", "kit",
            "kitchen", "kite", "kitten", "kiwi", "knee", "knife",
            "knock", "know", "lab", "label", "labor", "ladder",
            "lady", "lake", "lamp", "language", "laptop", "large",
            "later", "latin", "laugh", "laundry", "lava", "law",
            "lawn", "lawsuit", "layer", "lazy", "leader", "leaf",
            "learn", "leave", "lecture", "left", "leg", "legal",
            "legend", "leisure", "lemon", "lend", "length", "lens",
            "leopard", "lesson", "letter", "level", "liar", "liberty",
            "library", "license", "life", "lift", "light", "like",
            "limb", "limit", "link", "lion", "liquid", "list",
            "little", "live", "lizard", "load", "loan", "lobster",
            "local", "lock", "logic", "lonely", "long", "loop",
            "lottery", "loud", "lounge", "love", "loyal", "lucky",
            "luggage", "lumber", "lunar", "lunch", "luxury", "lyrics",
            "machine", "mad", "magic", "magnet", "maid", "mail",
            "main", "major", "make", "mammal", "man", "manage",
            "mandate", "mango", "mansion", "manual", "maple", "marble",
            "march", "margin", "marine", "market", "marriage", "mask",
            "mass", "master", "match", "material", "math", "matrix",
            "matter", "maximum", "maze", "meadow", "mean", "measure",
            "meat", "mechanic", "medal", "media", "melody", "melt",
            "member", "memory", "mention", "menu", "mercy", "merge",
            "merit", "merry", "mesh", "message", "metal", "method",
            "middle", "midnight", "milk", "million", "mimic", "mind",
            "minimum", "minor", "minute", "miracle", "mirror", "misery",
            "miss", "mistake", "mix", "mixed", "mixture", "mobile",
            "model", "modify", "mom", "moment", "monitor", "monkey",
            "monster", "month", "moon", "moral", "more", "morning",
            "mosquito", "mother", "motion", "motor", "mountain", "mouse",
            "move", "movie", "much", "muffin", "mule", "multiply",
            "muscle", "museum", "mushroom", "music", "must", "mutual",
            "myself", "mystery", "myth", "naive", "name", "napkin",
            "narrow", "nasty", "nation", "nature", "near", "neck",
            "need", "negative", "neglect", "neither", "nephew", "nerve",
            "nest", "net", "network", "neutral", "never", "news",
            "next", "nice", "night", "noble", "noise", "nominee",
            "noodle", "normal", "north", "nose", "notable", "note",
            "nothing", "notice", "novel", "now", "nuclear", "number",
            "nurse", "nut", "oak", "obey", "object", "oblige",
            "obscure", "observe", "obtain", "obvious", "occur", "ocean",
            "october", "odor", "off", "offer", "office", "often",
            "oil", "okay", "old", "olive", "olympic", "omit",
            "once", "one", "onion", "online", "only", "open",
            "opera", "opinion", "oppose", "option", "orange", "orbit",
            "orchard", "order", "ordinary", "organ", "orient", "original",
            "orphan", "ostrich", "other", "outdoor", "outer", "output",
            "outside", "oval", "oven", "over", "own", "owner",
            "oxygen", "oyster", "ozone", "pact", "paddle", "page",
            "pair", "palace", "palm", "panda", "panel", "panic",
            "panther", "paper", "parade", "parent", "park", "parrot",
            "party", "pass", "patch", "path", "patient", "patrol",
            "pattern", "pause", "pave", "payment", "peace", "peanut",
            "pear", "peasant", "pelican", "pen", "penalty", "pencil",
            "people", "pepper", "perfect", "permit", "person", "pet",
            "phone", "photo", "phrase", "physical", "piano", "picnic",
            "picture", "piece", "pig", "pigeon", "pill", "pilot",
            "pink", "pioneer", "pipe", "pistol", "pitch", "pizza",
            "place", "planet", "plastic", "plate", "play", "please",
            "pledge", "pluck", "plug", "plunge", "poem", "poet",
            "point", "polar", "pole", "police", "pond", "pony",
            "pool", "popular", "portion", "position", "possible", "post",
            "potato", "pottery", "poverty", "powder", "power", "practice",
            "praise", "predict", "prefer", "prepare", "present", "pretty",
            "prevent", "price", "pride", "primary", "print", "priority",
            "prison", "private", "prize", "problem", "process", "produce",
            "profit", "program", "project", "promote", "proof", "property",
            "prosper", "protect", "proud", "provide", "public", "pudding",
            "pull", "pulp", "pulse", "pumpkin", "punch", "pupil",
            "puppy", "purchase", "purity", "purpose", "purse", "push",
            "put", "puzzle", "pyramid", "quality", "quantum", "quarter",
            "question", "quick", "quit", "quiz", "quote", "rabbit",
            "raccoon", "race", "rack", "radar", "radio", "rail",
            "rain", "raise", "rally", "ramp", "ranch", "random",
            "range", "rapid", "rare", "rate", "rather", "raven",
            "raw", "razor", "ready", "real", "reason", "rebel",
            "rebuild", "recall", "receive", "recipe", "record", "recycle",
            "reduce", "reflect", "reform", "refuse", "region", "regret",
            "regular", "reject", "relax", "release", "relief", "rely",
            "remain", "remember", "remind", "remove", "render", "renew",
            "rent", "reopen", "repair", "repeat", "replace", "report",
            "require", "rescue", "resemble", "resist", "resource", "response",
            "result", "retire", "retreat", "return", "reunion", "reveal",
            "review", "reward", "rhythm", "rib", "ribbon", "rice",
            "rich", "ride", "ridge", "rifle", "right", "rigid",
            "ring", "riot", "ripple", "risk", "ritual", "rival",
            "river", "road", "roast", "robot", "robust", "rocket",
            "romance", "roof", "rookie", "room", "rose", "rotate",
            "rough", "round", "route", "royal", "rubber", "rude",
            "rug", "rule", "run", "runway", "rural", "sad",
            "saddle", "sadness", "safe", "sail", "salad", "salmon",
            "salon", "salt", "salute", "same", "sample", "sand",
            "satisfy", "satoshi", "sauce", "sausage", "save", "say",
            "scale", "scan", "scare", "scatter", "scene", "scheme",
            "school", "science", "scissors", "scorpion", "scout", "scrap",
            "screen", "script", "scrub", "sea", "search", "season",
            "seat", "second", "secret", "section", "security", "seed",
            "seek", "segment", "select", "sell", "seminar", "senior",
            "sense", "sentence", "series", "service", "session", "settle",
            "setup", "seven", "shadow", "shaft", "shallow", "share",
            "shed", "shell", "sheriff", "shield", "shift", "shine",
            "ship", "shiver", "shock", "shoe", "shoot", "shop",
            "short", "shoulder", "shove", "shrimp", "shrug", "shuffle",
            "shy", "sibling", "sick", "side", "siege", "sight",
            "sign", "silent", "silk", "silly", "silver", "similar",
            "simple", "since", "sing", "siren", "sister", "situate",
            "six", "size", "skate", "sketch", "ski", "skill",
            "skin", "skirt", "skull", "slab", "slam", "sleep",
            "slender", "slice", "slide", "slight", "slim", "slogan",
            "slot", "slow", "slush", "small", "smart", "smile",
            "smoke", "smooth", "snack", "snake", "snap", "sniff",
            "snow", "soap", "soccer", "social", "sock", "soda",
            "soft", "solar", "soldier", "solid", "solution", "solve",
            "someone", "song", "soon", "sorry", "sort", "soul",
            "sound", "soup", "source", "south", "space", "spare",
            "spatial", "spawn", "speak", "special", "speed", "spell",
            "spend", "sphere", "spice", "spider", "spike", "spin",
            "spirit", "split", "spoil", "sponsor", "spoon", "sport",
            "spot", "spray", "spread", "spring", "spy", "square",
            "squeeze", "squirrel", "stable", "stadium", "staff", "stage",
            "stairs", "stamp", "stand", "start", "state", "stay",
            "steak", "steel", "stem", "step", "stereo", "stick",
            "still", "sting", "stock", "stomach", "stone", "stool",
            "story", "stove", "strategy", "street", "strike", "strong",
            "struggle", "student", "stuff", "stumble", "style", "subject",
            "submit", "subway", "success", "such", "sudden", "suffer",
            "sugar", "suggest", "suit", "summer", "sun", "sunny",
            "sunset", "super", "supply", "supreme", "sure", "surface",
            "surge", "surprise", "surround", "survey", "suspect", "sustain",
            "swallow", "swamp", "swap", "swarm", "swear", "sweet",
            "swift", "swim", "swing", "switch", "sword", "symbol",
            "symptom", "syrup", "system", "table", "tackle", "tag",
            "tail", "talent", "talk", "tank", "tape", "target",
            "task", "taste", "tattoo", "taxi", "teach", "team",
            "tell", "ten", "tenant", "tennis", "tent", "term",
            "test", "text", "thank", "that", "theme", "then",
            "theory", "there", "they", "thing", "this", "thought",
            "three", "thrive", "throw", "thumb", "thunder", "ticket",
            "tide", "tiger", "tilt", "timber", "time", "tiny",
            "tip", "tired", "tissue", "title", "toast", "tobacco",
            "today", "toddler", "toe", "together", "toilet", "token",
            "tomato", "tomorrow", "tone", "tongue", "tonight", "tool",
            "tooth", "top", "topic", "topple", "torch", "tornado",
            "tortoise", "toss", "total", "tourist", "toward", "tower",
            "town", "toy", "track", "trade", "traffic", "tragic",
            "train", "transfer", "trap", "trash", "travel", "tray",
            "treat", "tree", "trend", "trial", "tribe", "trick",
            "trigger", "trim", "trip", "trophy", "trouble", "truck",
            "true", "truly", "trumpet", "trust", "truth", "try",
            "tube", "tuition", "tumble", "tuna", "tunnel", "turkey",
            "turn", "turtle", "twelve", "twenty", "twice", "twin",
            "twist", "two", "type", "typical", "ugly", "umbrella",
            "unable", "unaware", "uncle", "uncover", "under", "undo",
            "unfair", "unfold", "unhappy", "uniform", "unique", "unit",
            "universe", "unknown", "unlock", "until", "unusual", "unveil",
            "update", "upgrade", "uphold", "upon", "upper", "upset",
            "urban", "urge", "usage", "use", "used", "useful",
            "useless", "usual", "utility", "vacant", "vacuum", "vague",
            "valid", "valley", "valve", "van", "vanish", "vapor",
            "various", "vast", "vault", "vehicle", "velvet", "vendor",
            "venture", "venue", "verb", "verify", "version", "very",
            "vessel", "veteran", "viable", "vibrant", "vicious", "victory",
            "video", "view", "village", "vintage", "violin", "virtual",
            "virus", "visa", "visit", "visual", "vital", "vivid",
            "vocal", "voice", "void", "volcano", "volume", "vote",
            "voyage", "wage", "wagon", "wait", "walk", "wall",
            "walnut", "want", "warfare", "warm", "warrior", "wash",
            "wasp", "waste", "water", "wave", "way", "wealth",
            "weapon", "wear", "weasel", "weather", "web", "wedding",
            "weekend", "weird", "welcome", "west", "wet", "whale",
            "what", "wheat", "wheel", "when", "where", "whip",
            "whisper", "wide", "width", "wife", "wild", "will",
            "win", "window", "wine", "wing", "wink", "winner",
            "winter", "wire", "wisdom", "wise", "wish", "witness",
            "wolf", "woman", "wonder", "wood", "wool", "word",
            "work", "world", "worry", "worth", "wrap", "wreck",
            "wrestle", "wrist", "write", "wrong", "yard", "year",
            "yellow", "you", "young", "youth", "zebra", "zero",
            "zone", "zoo"
        ]);
})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('bitcoin')
        .constant('COIN', 100000000)
        .constant('DEFAULT_FEE', 10000) // 0.0001 BTC
        .constant('MIN_OUTPUT', 5460)   // 0.0000546 BTC
        .constant('MAINNET_PUBLIC', 0x0488b21e)
        .constant('MAINNET_PRIVATE', 0x0488ade4)
        .constant('TESTNET_PUBLIC', 0x043587cf)
        .constant('TESTNET_PRIVATE', 0x04358394)

        .constant('RECEIVE_CHAIN', 0)
        .constant('CHANGE_CHAIN', 1)
    // how many extra addresses to generate
        .constant('GAP', 1);

})(window, window.angular);

(function(window, angular, BigNumber) {
    'use strict';

    angular.module('bitcoin')
        .directive('bcInput', bcInput);

    bcInput.$inject = ['$rootScope'];

    function bcInput($rootScope) {
        return {
            template: '<input class="form-control crypto-input" ' +
                'type="text" ng-model="displayVal">' +
                '<span class="input-group-addon crypto-input-label">{{symbol}}</span>',
            restrict: 'E',
            scope: {
                intVal: '=model',
            },
            link: function(scope) {
                $rootScope.$watch('currency', function() {
                    scope.symbol = $rootScope.currency;
                    updateDisplay();
                });

                scope.$watch('intVal', function(newVal) {
                    if (newVal === undefined ||
                        scope.displayVal === undefined ||
                        !scope.displayVal.length) {
                        return;
                    }
                    var val = parseInt(newVal, 10);
                    if (scope.displayVal.toString().match(/^0+\.0+$/)) {
                        return;
                    } else if (!newVal.toString().length) {
                        scope.displayVal = 0;
                    } else if (isNaN(val)) {
                        scope.displayVal = "-";
                    } else {
                        updateDisplay();
                    }
                });

                scope.$watch('displayVal', function(newVal) {
                    if (newVal === undefined) {
                        return;
                    }
                    var val = new BigNumber(parseFloat(newVal));
                    if (!newVal.toString().length) {
                        scope.intVal = 0;
                    } else if (newVal.toString().match(/^0+\.0+$/)) {
                        scope.intVal = 0;
                    } else if (isNaN(val)) {
                        scope.intVal = NaN;
                    } else {
                        scope.intVal = Math.floor(val.times($rootScope.denomination).toNumber());
                    }
                });

                function updateDisplay() {
                    var val = new BigNumber(parseInt(scope.intVal, 10));
                    var numStr = val.dividedBy($rootScope.denomination).toString();
                    scope.displayVal = numStr;
                }
            }
        };
    }

})(window, window.angular, window.BigNumber);

(function(window, angular, BigInteger, Crypto, Bitcoin, ECPointFp, getSECCurveByName) {
    'use strict';

    angular.module('bitcoin')
        .factory('messageUtil', messageUtilFactory);

    messageUtilFactory.$inject = [];

    function messageUtilFactory() {

        var trimRegexp = /(^[\s\n]+|[\s\n]+$)/g;
        var MESSAGE_HEADER = "Bitcoin Signed Message:\n";

        var messageUtil = {
            trim: trim,
            makeMessageBytes: makeMessageBytes,
            getBytes: getBytes,
            processSignature: processSignature,
            MESSAGE_HEADER: MESSAGE_HEADER,
        };

        return messageUtil;

        function makeMessageBytes(message) {
            message = trim(message);
            return getBytes(MESSAGE_HEADER).concat(getBytes(message));
        }

        function trim(message) {
            return message.replace(trimRegexp, '');
        }

        function getBytes(str) {
            var bytes = Crypto.charenc.UTF8.stringToBytes(str);
            var len = bytes.length;
            if (len < 0xfd) { // 253
                bytes = [len].concat(bytes);
            } else if (len < 0xffff) { // 65535
                // ignore this line in jshint, it does not like
                // bitwise operations
                bytes = [0xfd, len & 0xff, len >>> 0x8].concat(bytes); // jshint ignore:line
            } else {
                throw new Error("Message to large");
            }
            return bytes;
        }

        function processSignature(message, address, sigBytes, compressed, addrType) {
            addrType = addrType || 0;
            if (compressed === undefined) {
                compressed = true;
            }
            var parsed = Bitcoin.ECDSA.parseSig(sigBytes);
            var sequence = [0];
            sequence = sequence.concat(parsed.r.toByteArrayUnsigned());
            sequence = sequence.concat(parsed.s.toByteArrayUnsigned());
            for (var i = 0; i < 4; i++) {
                var nV = 27 + i;
                if (compressed) {
                    console.debug("processSignature: is compressed");
                    nV += 4;
                }
                sequence[0] = nV;
                var sig = Crypto.util.bytesToBase64(sequence);
                var sigAddress = verifyMessage(sig, message, addrType);
                console.debug("processSignature: got sigAddress", sigAddress, "address=", address);
                if (sigAddress === address) {
                    console.debug("processSignature: found match");
                    return sig;
                }
            }
            console.debug("processSignature: no match found");
            return false;
        }

        function msgDigest(message) {
            var bytes = makeMessageBytes(message);
            return Crypto.SHA256(Crypto.SHA256(bytes, {asBytes:true}), {asBytes:true});
        }

        function verifyMessage(signature, message, addrtype) {
            var sig;
            try {
                sig = Crypto.util.base64ToBytes(signature);
            } catch(err) {
                console.error(err, signature);
                return false;
            }

            if (sig.length !== 65){
                console.error("Invalid sig length", sig.length, sig);
                return false;
	        }
            // extract r,s from signature
            var r = BigInteger.fromByteArrayUnsigned(sig.slice(1,1+32));
            var s = BigInteger.fromByteArrayUnsigned(sig.slice(33,33+32));

            // get recid
            var compressed = false;
            var nV = sig[0];
            if (nV < 27 || nV >= 35){
    	        console.error("nV error");
                return false;
            }
            if (nV >= 31) {
                compressed = true;
                nV -= 4;
            }
            var recid = BigInteger.valueOf(nV - 27);

            var ecparams = getSECCurveByName("secp256k1");
            var curve = ecparams.getCurve();
            var a = curve.getA().toBigInteger();
            var b = curve.getB().toBigInteger();
            var p = curve.getQ();
            var G = ecparams.getG();
            var order = ecparams.getN();

            var x = r.add(order.multiply(recid.divide(BigInteger.valueOf(2))));
            var alpha = x.multiply(x).multiply(x).add(a.multiply(x)).add(b).mod(p);
            var beta = alpha.modPow(p.add(BigInteger.ONE).divide(BigInteger.valueOf(4)), p);
            var y = beta.subtract(recid).isEven() ? beta : p.subtract(beta);

            var R = new ECPointFp(curve, curve.fromBigInteger(x), curve.fromBigInteger(y));
            var e = BigInteger.fromByteArrayUnsigned(msgDigest(message));
            var minus_e = e.negate().mod(order);
            var inv_r = r.modInverse(order);
            var Q = (R.multiply(s).add(G.multiply(minus_e))).multiply(inv_r);

            var public_key = Q.getEncoded(compressed);
            var addr = new Bitcoin.Address(Bitcoin.Util.sha256ripe160(public_key));
            addr.version = addrtype ? addrtype : 0;
            return addr.toString();
        }

    }

})(window, window.angular, window.BigInteger, window.Crypto, window.Bitcoin, window.ECPointFp, window.getSECCurveByName);

(function(window, angular, Bitcoin) {
    'use strict';

    angular.module('bitcoin')
        .factory('Transaction', TransactionFactory);

    TransactionFactory.$inject = ['hexUtil', 'DEFAULT_FEE', 'MIN_OUTPUT'];

    function TransactionFactory(hexUtil, DEFAULT_FEE, MIN_OUTPUT) {

        var ERR_INVALID_FEE          = Transaction.ERR_INVALID_FEE         = "Invalid fee";
        var ERR_NO_OUTPUTS           = Transaction.ERR_NO_OUTPUTS          = "No outputs";
        var ERR_INVALID_AMOUNT       = Transaction.ERR_INVALID_AMOUNT      = "Invalid amount";
        var ERR_AMOUNT_TOO_LOW       = Transaction.ERR_AMOUNT_TOO_LOW      = "Amount must be greater than " + MIN_OUTPUT;
        var ERR_NO_INPUTS            = Transaction.ERR_NO_INPUTS           = "Missing input array";
        var ERR_NO_CHANGE_ADDRESS    = Transaction.ERR_NO_CHANGE_ADDRESS   = "Missing change address";
        var ERR_INSUFFICIENT_INPUTS  = Transaction.ERR_INSUFFICIENT_INPUTS = "Not enough inputs";
        var ERR_BAD_SIGNED_SCRIPTS   = Transaction.ERR_BAD_SIGNED_SCRIPTS  = "Invalid signed scripts";

        function Transaction(options) {
            var fee = this.fee = options.fee === undefined ? DEFAULT_FEE : parseInt(options.fee, 10);
            if (isNaN(fee) || fee < 0) {
                throw ERR_INVALID_FEE;
            }
            var outputs = this.outputs = options.outputs;
            if (!outputs) {
                // if no outputs in the options, look for "to" and
                // "amount" and make an output object
                var to = options.to;
                if (!to) {
                    throw ERR_NO_OUTPUTS;
                }
                var amount = parseInt(options.amount, 10);
                if (isNaN(amount)) {
                    throw ERR_INVALID_AMOUNT;
                }
                outputs = this.outputs = [{
                    address: to,
                    amount: amount
                }];
            }
            if (!Array.isArray(outputs)) {
                outputs = [outputs];
            }
            var inputs = options.inputs;
            if (!inputs || !Array.isArray(inputs)) {
                throw ERR_NO_INPUTS;
            }
            // sort inputs by most to least confirmations
            inputs.sort(function(a, b) {
                return a.confirmations > b.confirmations ? -1 : 1;
            });
            var changeAddress = this.changeAddress = options.change || options.changeAddress;
            if (!changeAddress) {
                throw ERR_NO_CHANGE_ADDRESS;
            }

            // make a new transaction
            this.tx = new Bitcoin.Transaction();
            // initialize total out and in
            this.totalOut = 0;
            this.totalIn = 0;
            // set up empty input array on 'this', it gets filled with
            // the inputs we actually use on calling addInputs
            this.inputs = [];
            // now add the outputs
            this.addOutputs(outputs);
            // set the target amount
            this.target = this.totalOut + this.fee;
            // then add inputs
            var change = this.changeAmount = this.addInputs(inputs);
            if (change < 0) {
                // if change is less than 0, out inputs were not enough to
                // cover the outputs
                throw ERR_INSUFFICIENT_INPUTS;
            } else if (change > 0 && change < MIN_OUTPUT) {
                if (options.forceSmallChange) {
                    this.addOutput({
                        address: changeAddress,
                        amount: change
                    }, 'force it');
                } else {
                    throw {
                        change: change
                    };
                }
            } else if (change > 0) {
                // if greater than 0, then we have change left over,
                // send it to the change address provided
                this.addOutput({
                    address: changeAddress,
                    amount: change
                });
            }
            // set the unsigned tx to this instance
            this.unsignedHex = Bitcoin.Util.bytesToHex(this.tx.serialize());
            console.debug("transaction assembled", this);
        }

        // add outputs will take the outputs for our API and convert
        // them to the bitcoinjs API and add them to the transaction.
        // return the total of the output values we encountered this
        // run

        Transaction.prototype.addOutputs = function(outputs) {
            outputs.forEach(this.addOutput, this);
        };

        Transaction.prototype.addOutput = function(output, forceSmall) {
            var amount = parseInt(output.amount, 10);
            if (isNaN(amount)) {
                throw ERR_INVALID_AMOUNT;
            }
            if (amount < MIN_OUTPUT && !forceSmall) {
                throw ERR_AMOUNT_TOO_LOW;
            }
            this.totalOut += amount;
            var address = output.address;
            var bcAddr = new Bitcoin.Address(address);
            var bcOut = new Bitcoin.TransactionOut({
                value: hexUtil.intToBigEndianValue(amount, 8),
                script: Bitcoin.Script.createOutputScript(bcAddr)
            });
            this.tx.addOutput(bcOut);
        };

        // add inputs will take the inputs for our API and convert
        // them to the bitcoinjs API and add them to the transaction.
        // add all inputs we use to the 'inputs' array on our
        // Transaction instance

        // return the remainder to send to change
        Transaction.prototype.addInputs = function(inputs) {
            inputs.forEach(this.addInput, this);
            return this.totalIn - this.target;
        };

        Transaction.prototype.addInput = function(input) {
            // if we have all the inputs we need to cover the
            // output and the fee, just move on
            if (this.totalIn >= this.target) {
                return;
            }
            if (input.confirmations < 1) {
                return;
            }
//             var amount = parseInt(input.value, 10);
			console.debug("adding inputs");
            var amount = parseInt(input.value, 10);
            if (isNaN(amount)) {
                throw ERR_INVALID_AMOUNT;
            }
//             var hash = Bitcoin.Util.bytesToBase64(Bitcoin.Util.hexToBytes(input.txid));
            var hash = Bitcoin.Util.bytesToBase64(Bitcoin.Util.hexToBytes(hexUtil.makeStringSmallEndian(input.txid)));
            var script = Bitcoin.Util.hexToBytes(input.script);
            var bcIn = new Bitcoin.TransactionIn({
                outpoint: {
                    hash: hash,
                    index: input.vout
                },
                script: script,
                sequence: 4294967295
            });
            this.tx.addInput(bcIn);
            // add some more info to the input object here
            this.inputs.push(input);
            this.totalIn += amount;
        };

        Transaction.prototype.replaceScripts = function(signedScripts) {
            if (!Array.isArray(signedScripts)) {
                throw ERR_BAD_SIGNED_SCRIPTS;
            }
            if (signedScripts.length !== this.inputs.length) {
                throw ERR_BAD_SIGNED_SCRIPTS;
            }
            var hex = this.unsignedHex;
            this.inputs.forEach(function(input, index) {
                hex = hex.replace('19' + input.script, signedScripts[index]);
            });
            this.signedHex = hex;
            return hex;
        };

        return Transaction;
    }

})(window, window.angular, window.Bitcoin);

(function(window, angular) {
    'use strict';

    angular.module('bitcoin')
        .factory('txUtil', txUtilFactory);

    txUtilFactory.$inject = [
        '$q',
        '$http',
    ];

    function txUtilFactory($q, $http) {


        var baseUrl = 'https://bitlox.io/api';

//         var baseUrl = '/api';

        var txUtil = {
            getHex: getHex,
            submit: submit,
        };

        function getHex(bigEndianTxid) {
        	console.debug("raw source txid " + bigEndianTxid);
            return $http.get(baseUrl + '/rawtx/' + bigEndianTxid ).then(function(res) {
            	console.debug("raw source tx " + res.data.rawtx);
                return res.data.rawtx;
            });
        }


// this shit has to be completely different.
//         function submit(signedHex) {
//             return $http.post(baseUrl, {
//                 hex: signedHex
//             }).then(function(res) {
//                 if (res.data.error) {
//                     if (res.data.error.indexOf("already spent") >= 0) {
//                         return $q.reject(new Error("Some inputs already spent, please try transaction again in a few minutes"));
//                     } else {
//                         return $q.reject(new Error(res.data.error));
//                     }
//                 }
//                 return res.data;
//             });
//         }

// this shit has to be completely different.
        function submit(signedHex) {
        	console.debug("raw signed tx " + signedHex);
            return $http.post(baseUrl + '/tx/send', {
                rawtx: signedHex
            }).then(function(res) {
                if (res.data.error) {
                	console.debug("tx error " + res.data.error);
                    if (res.data.error.indexOf("already spent") >= 0) {
                        return $q.reject(new Error("Some inputs already spent, please try transaction again in a few minutes"));
                    } else {
                        return $q.reject(new Error(res.data.error));
                    }
                }
                console.debug("tx good " + res.data);
                return res.data;
            });
        }

        return txUtil;
    }

})(window, window.angular);

(function(window, angular, BigNumber) {
    'use strict';

    angular.module('bitcoin')
        .directive('bcUnitSelector', bcUnitSelector);

    bcUnitSelector.$inject = ['$rootScope', 'COIN', 'Cookie'];

    var COOKIE_NAME = 'bitlox-denom';

    function bcUnitSelector($rootScope, COIN, Cookie) {
        return {
            scope: true,
            restrict: 'E',
            templateUrl: 'bitcoin/unit-selector.html',
            replace: true,
            link: function(scope) {
                var bitcoin = new BigNumber(COIN);
                var milly = bitcoin.dividedBy(1000);
                var bit = bitcoin.dividedBy(1000000);

                scope.options = {
                    BTC: bitcoin,
                    mBTC: milly,
                    bits: bit
                };

                scope.changeCurrency = function(denom, value) {
                    scope.current = value;
                };


                scope.$watch('current', function() {
                    if (scope.current) {
                        $rootScope.denomination = scope.current;
                        if (scope.current.equals(scope.options.BTC)) {
                            $rootScope.currency = 'BTC';
                        } else if (scope.current.equals(scope.options.mBTC)) {
                            $rootScope.currency = 'mBTC';
                        } else if (scope.current.equals(scope.options.bits)) {
                            $rootScope.currency = 'bits';
                        }
                        scope.currentDisplay = $rootScope.currency;
                        Cookie.set(COOKIE_NAME, $rootScope.currency);
                    }
                });

                var cookieVal = Cookie.get(COOKIE_NAME);
                if (cookieVal) {
                    scope.current = scope.options[cookieVal];
                } else {
                    scope.current = bitcoin;
                }

            }
        };
    }

})(window, window.angular, window.BigNumber);

(function(window, angular, BigNumber) {
    'use strict';

    angular.module('bitcoin')
        .directive('bcVal', bcVal);

    bcVal.$inject = ['$rootScope', '$filter'];

    function bcVal($rootScope, $filter) {
        return {
            restrict: 'A',
            scope: {
                bcVal: '=',
            },
            link: function(scope, elem) {
                var val = new BigNumber(parseInt(scope.bcVal, 10));

                scope.$watch('bcVal', function(v) {
                    if (v !== undefined) {
                        val = new BigNumber(parseInt(v, 10));
                        update();
                    }
                });

                $rootScope.$watch('denomination', function(d) {
                    if (d) {
                        update();
                    }
                });

                var filter = $filter('bcNumber');
                function update() {
                    var numStr = val.dividedBy($rootScope.denomination).toString();
                    numStr = filter(numStr);
                    elem.text(numStr + " " + $rootScope.currency);
                }
            }
        };
    }

})(window, window.angular, window.BigNumber);

(function(window, angular) {
    'use strict';

    angular.module('app.core')
        .config(config);

    config.$inject = ['$routeProvider'];

    function config() {
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.core')
        .directive('expertMode', expertMode);

    expertMode.$inject = ['$rootScope', 'Cookie'];

    var COOKIE_NAME = 'bitlox-expert';

    function expertMode($rootScope, Cookie) {
        return {
            scope: true,
            restrict: 'E',
            templateUrl: 'core/expert-mode.html',
            replace: true,
            link: function(scope) {

                scope.status = "Activate Expert Mode";
                scope.$watch('current', function() {
                    $rootScope.expertMode = scope.current;
                    scope.status = scope.current ? "Expert Mode Active" : "Activate Expert Mode";
                    Cookie.set(COOKIE_NAME, $rootScope.expertMode);
                });

                var cookieVal = Cookie.get(COOKIE_NAME);
                if (cookieVal) {
                    scope.current = cookieVal ? true : false;
                } else {
                    scope.current = false;
                }

            }
        };
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.core')
        .controller('HomeCtrl', HomeCtrl);

    HomeCtrl.$inject = ['$timeout', 'hidapi', 'Toast'];



    function HomeCtrl($timeout, hidapi, Toast) {
        var vm = this;

        var checkDevice = vm.checkDevice = function() {
            vm.openingDevice = true;
            hidapi.ping().then(function() {
                hidapi.uuid().then(function(uuid) {
                    vm.uuid = uuid;
                    vm.openingDevice = false;
                }, Toast.errorHandler);
            }, Toast.errorHandler);
        };

        checkDevice();

    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.core')
        .controller('NavCtrl', NavCtrl);

    NavCtrl.$inject = [];

    function NavCtrl() {
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.core')
        .config(['$provide', function($provide) {
            // Fix sourcemaps
            // @url https://github.com/angular/angular.js/issues/5217#issuecomment-50993513
            $provide.decorator('$exceptionHandler', ['$delegate', function($delegate) {
                return function(exception, cause) {
                    $delegate(exception, cause);
                    setTimeout(function() {
                        throw exception;
                    });
                };
            }]);
       }]);

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.core')
        .controller('StatusCtrl', StatusCtrl);

    StatusCtrl.$inject = ['hidapi', 'WalletStatus'];

    function StatusCtrl(hidapi, WalletStatus) {
        var vm = this;

        vm.bitlox = {
            connectAttempted: false,
            connected: true,
            status: "No Bitlox",
            alertClass: "danger"
        };

        vm.wallet = {
            status: "No Wallet",
            alertClass: "warning"
        };

        vm.refreshBitlox = function() {
            hidapi.ping();
        };

        hidapi.$scope.$watch('status', function(hidstatus) {
            switch(hidstatus) {
            case hidapi.STATUS_CONNECTED:
                vm.bitlox.connectAttempted = true;
                vm.bitlox.connected = true;
                vm.bitlox.status = "Bitlox connected";
                vm.bitlox.alertClass = "success";
                vm.bitlox.glyph = "glyphicon-ok";
                break;
            case hidapi.STATUS_DISCONNECTED:
                console.warn("DISCONNECTED");
                vm.bitlox.connected = false;
                vm.bitlox.status = "Bitlox disconnected!";
                vm.bitlox.alertClass = "danger";
                vm.bitlox.glyph = "glyphicon-remove";
                break;
            case hidapi.STATUS_WRITING:
                vm.bitlox.connectAttempted = true;
                vm.bitlox.connected = true;
                vm.bitlox.status = "Bitlox writing";
                vm.bitlox.alertClass = "info";
                vm.bitlox.glyph = "glyphicon-upload";
                break;
            case hidapi.STATUS_READING:
                vm.bitlox.connectAttempted = true;
                vm.bitlox.connected = true;
                vm.bitlox.status = "Bitlox reading";
                vm.bitlox.alertClass = "info";
                vm.bitlox.glyph = "glyphicon-download";
                break;
            default:
                vm.bitlox.connected = false;
                vm.bitlox.status = null;
            }
        });

        WalletStatus.$watch('status', function(walletstatus) {
            switch(walletstatus) {
            case WalletStatus.STATUS_LOADING:
                vm.wallet.status = "Loading wallet";
                vm.wallet.alertClass = "info";
                vm.wallet.glyph = "glyphicon-download";
                break;
            case WalletStatus.STATUS_LOADING_UNSPENT:
                vm.wallet.status = "Finding unspent outputs";
                vm.wallet.alertClass = "info";
                vm.wallet.glyph = "glyphicon-cloud-download";
                break;
            case WalletStatus.STATUS_LOADING_TRANSACTIONS:
                vm.wallet.status = "Finding transactions";
                vm.wallet.alertClass = "info";
                vm.wallet.glyph = "glyphicon-cloud-download";
                break;
            case WalletStatus.STATUS_SENDING:
                vm.wallet.status = "Wallet sending";
                vm.wallet.alertClass = "info";
                vm.wallet.glyph = "glyphicon-log-out";
                break;
            case WalletStatus.STATUS_SIGNING:
                vm.wallet.status = "Wallet signing";
                vm.wallet.alertClass = "info";
                vm.wallet.glyph = "glyphicon-pencil";
                break;
            default:
                vm.wallet.status = null;
            }
        });


    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('hid')
        .constant('VENDOR_ID', 0x03EB)
        .constant('PRODUCT_ID', 0x204F);

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('hid')
        .constant('hidCommands', {
            button_ack: '2323005100000000',
            format_storage: '2323000D000000220A204242424242424242424242424242424242424242424242424242424242424242',

            list_wallets:  '2323001000000000',

            scan_wallet:   '2323006100000000',

            // prefixes for commands that take in a variable amount of
            // data, a content size and the payload data is appended
            newWalletPrefix: '23230004',
            restoreWalletPrefix: '23230018',
            renameWalletPrefix: '2323000F',
            signTxPrefix:    '23230065',
            signMessagePrefix: '23230070',
            otpPrefix: '23230057',
            qrPrefix: '23230080',
            setChangePrefix: '23230066',

            // these just get one byte of hex for the wallet number
            // added to them
            deleteWalletPrefix: '232300160000000208',
            loadWalletPrefix: '2323000B0000000208',

            // just a ping
            ping: '23230000000000070A0548656C6C6F',

        });

})(window, window.angular);

(function(window, angular, async, ProtoBuf, ByteBuffer) {
    'use strict';

    angular.module('hid')
        .service('hidapi', HidAPI);

    HidAPI.$inject = [
        '$q', '$timeout', '$interval', '$rootScope',
        'Toast', 'hexUtil', 'txUtil', 'messageUtil',
        'VENDOR_ID', 'PRODUCT_ID', 'RECEIVE_CHAIN', 'CHANGE_CHAIN',
        'hidCommands'
    ];

    var PULSE_INTERVAL = (30 * 1000);

    function HidAPI($q, $timeout, $interval, $rootScope,
                    Toast, hexUtil, txUtil, messageUtil,
                    VENDOR_ID, PRODUCT_ID, RECEIVE_CHAIN, CHANGE_CHAIN,
                    hidCommands) {
        this.VENDOR_ID = VENDOR_ID;
        this.PRODUCT_ID = PRODUCT_ID;
        this.RECEIVE_CHAIN = RECEIVE_CHAIN;
        this.CHANGE_CHAIN = CHANGE_CHAIN;
        this.Toast = Toast;
        this._plugin = null;
        this.version = null;
        this.path = null;
        this._device = null;
        this._builder = null;

        this.$q = $q;
        this.$timeout = $timeout;
        this.$interval = $interval;

        this.commands = hidCommands;

        this.hexUtil = hexUtil;
        this.messageUtil = messageUtil;
        this.getTxHex = txUtil.getHex;

        this.$scope = $rootScope.$new();
        this.$scope.status = HidAPI.STATUS_DISCONNECTED;
    }

    HidAPI.TYPE_INITIALIZE         = HidAPI.prototype.TYPE_INITIALIZE = 'initialize';
    HidAPI.TYPE_PUBLIC_ADDRESS     = HidAPI.prototype.TYPE_PUBLIC_ADDRESS = 'public address';
    HidAPI.TYPE_ADDRESS_COUNT      = HidAPI.prototype.TYPE_ADDRESS_COUNT = 'address count';
    HidAPI.TYPE_WALLET_LIST        = HidAPI.prototype.TYPE_WALLET_LIST = 'wallet list';
    HidAPI.TYPE_PONG               = HidAPI.prototype.TYPE_PONG = 'pong';
    HidAPI.TYPE_SUCCESS            = HidAPI.prototype.TYPE_SUCCESS = 'success';
    HidAPI.TYPE_ERROR              = HidAPI.prototype.TYPE_ERROR = 'error';
    HidAPI.TYPE_UUID               = HidAPI.prototype.TYPE_UUID = 'uuid';
    HidAPI.TYPE_SIGNATURE          = HidAPI.prototype.TYPE_SIGNATURE = 'signature';
    HidAPI.TYPE_PLEASE_ACK         = HidAPI.prototype.TYPE_PLEASE_ACK = 'please ack';
    HidAPI.TYPE_PLEASE_OTP         = HidAPI.prototype.TYPE_PLEASE_OTP = 'please otp';
    HidAPI.TYPE_XPUB               = HidAPI.prototype.TYPE_XPUB = 'xpub';
    HidAPI.TYPE_SIGNATURE_RETURN   = HidAPI.prototype.TYPE_SIGNATURE_RETURN = 'signature return';
    HidAPI.TYPE_MESSAGE_SIGNATURE  = HidAPI.prototype.TYPE_MESSAGE_SIGNATURE = 'message signature';

    HidAPI.STATUS_DISCONNECTED     = HidAPI.prototype.STATUS_DISCONNECTED = "disconnected";
    HidAPI.STATUS_CONNECTED        = HidAPI.prototype.STATUS_CONNECTED = "connected";
    HidAPI.STATUS_READING          = HidAPI.prototype.STATUS_READING = "reading";
    HidAPI.STATUS_WRITING          = HidAPI.prototype.STATUS_WRITING = "writing";


    // function to get the plugin from the document element
    HidAPI.prototype.plugin = function() {
        if (this._plugin === null) {
            console.debug("plugin: device is null, finding on document");
            this._plugin = document.getElementById('hidapiPlugin');
        }
        console.debug("plugin: found", this._plugin);
        return this._plugin;
    };

    // Get the device. If we alreay have it, just return it.
    // Otherwise, do a hidraw scan and find, then open, the device
    HidAPI.prototype.device = function() {
        var hidapi = this;
        if (hidapi._device !== null) {
            return hidapi._device;
        }
        if (hidapi.pulse) {
            hidapi.$interval.cancel(hidapi.pulse);
        }
        // get the hid plugin
        console.debug("device: looking for plugin");
        var plugin = hidapi.plugin();
        if (plugin === null) {
            hidapi.close();
            return hidapi._device; // it's still null
        }
        console.debug("device: found plugin", plugin);
        // and list all of the hidraw devices that match our
        // vendor and product ids
        console.debug("device: looking for devices");
        var devices = plugin.hid_enumerate(hidapi.VENDOR_ID, hidapi.PRODUCT_ID);
        console.debug("device: found devices", devices);
        // if we do not find it, return null
        if (!devices.length) {
            hidapi.close();
            hidapi.Toast.error("No devices connected");
            return null;
        }
        // otherwise, get the path
        var path = hidapi.path = devices[0].path;
        // and open it
        console.debug("device: opening path", path);
        hidapi._device = hidapi.plugin().hid_open_path(path);
        console.debug("device: path opened", hidapi._device);
        // if the device is null still, there was an error opening the
        // path
        if (hidapi._device === null) {
            hidapi.close();
            hidapi.Toast.error("Error opening device");
            return null;
        }
        hidapi.$scope.status = hidapi.STATUS_CONNECTED;
        // set up the heartbeat interval if it does now exist
        if (!hidapi.pulse) {
            hidapi.pulse = hidapi.$interval(function() {
                // only do this if we are not already doing something
                if (!hidapi.doingCommand &&
                    hidapi.$scope.status !== hidapi.STATUS_READING &&
                    hidapi.$scope.status !== hidapi.STATUS_WRITING) {
                    console.debug("heartbeat");
                    hidapi.ping().catch(function() {
                        hidapi.close();
                    });
                }
            }, PULSE_INTERVAL);
        }
        // return the newly found device
        return hidapi._device;
    };

    HidAPI.prototype.protoBuilder = function() {
        if (this._builder === null) {
            var builder = ProtoBuf.loadProtoFile("proto/messages.proto");
            this._builder = builder.build();
        }
        return this._builder;
    };

    HidAPI.prototype.pluginDetect = function() {
        var plugin = navigator.plugins[name];
        if (typeof(plugin) !== "undefined") {
            var re = /([0-9.]+)\.dll/; // look for the version at the end of the filename, before dll
            // Get the filename
            var filename = plugin.filename;
            // Search for the version
            var fnd;
            fnd = re.exec(filename);
            if (fnd === null) { // no version found
                if (plugin.version) {
                    this.version = plugin.version;
                    return this.version;
                } else {
                    return true; // plugin installed, unknown version
                }
            } else {
                this.version = fnd[1];
                return this.version; // plugin installed, returning version
            }

        } else {
            console.error("Plugin missing");
            return null;
        }
    };

    HidAPI.prototype.chunkData = function(data, chunkSize) {
        if (chunkSize === undefined) {
            chunkSize = 2;
        }
        return data.match(new RegExp('.{1,' + chunkSize + '}', 'g'));
    };

    function pausecomp(milliseconds) {
        var start = new Date().getTime();
        for (var i = 0; i < 1e7; i++) {
            if ((new Date().getTime() - start) > milliseconds) {
                break;
            }
        }
    }

    HidAPI.prototype.write = function(data) {
        var hidapi = this;
        hidapi.$scope.status = hidapi.STATUS_WRITING;
        var deferred = this.$q.defer();
        this.$timeout(function() {
            // get the device
            var dev = hidapi.device();
            if (dev === null) {
                hidapi.close();
                return deferred.reject(new Error("No device to write to"));
            }
            // check remainder against 8 bytes and add 4 null bytes if we
            // have 0, 6, or 7 bytes of space left over
            var remainder = data.length % 16;
            if (remainder === 0 || remainder === 12 || remainder === 14) {
                data = '00000000' + data;
            }
            // split into 16 byte chunks
            var chunks = hidapi.chunkData(data, 32);
            // keep track of the total sent
            var totalSent = 0;
            for(var i = 0; i < chunks.length; i++) {
                var thisData = chunks[i];
                if (thisData.length) {
                    thisData = '00' + thisData;
                    // if this is the final chunk, append the terminator
                    if (i + 1 === chunks.length) {
                        thisData += '7E7E';
                    }
                    // write to the device
                    var txResult = dev.hid_write(thisData);
                    pausecomp(50);
                    // if we did not write anything, return 0 to fail the
                    // send
                    if (txResult <= 0) {
                        hidapi.close();
                        return deferred.reject(new Error("Write error"));
                    }
                    // add to the total sent
                    totalSent += txResult;
                }
            }
            return deferred.resolve(totalSent);
        });
        return deferred.promise.finally(function() {
            hidapi.$scope.status = hidapi.STATUS_CONNECTED;
        });
    };

    var trimBeef = new RegExp('^(DEAD|BEEF|ADBEEF|EFDEAD)(DEAD|BEEF)+(2323)');
    HidAPI.prototype.hidRead = function(size, timeout) {
        if (timeout === undefined) {
            timeout = 3000;
        }
        if (size === undefined) {
            size = 64;
        }
        var hidapi = this;
        var deferred = this.$q.defer();
        this.$timeout(function() {
            var result;
            try {
                result = hidapi.device().hid_read(size, timeout).replace(trimBeef, '$3');
                deferred.resolve(result);
            } catch (ex) {
                console.error(ex);
                return deferred.reject(ex);
            }
        });
        return deferred.promise;
    };

    var magic = '2323';
    var magicRegexp = new RegExp(magic);
    var magicRegexpEdge = new RegExp('BEEF(23){1,2}$');
    HidAPI.prototype.read = function(serialData, wait) {
        if (serialData === undefined) {
            serialData = '';
        }
        var hidapi = this;
        return this.hidRead().then(function(newData) {
            hidapi.$scope.status = hidapi.STATUS_READING;
            serialData = serialData + newData;
            if (magicRegexpEdge.test(serialData)) {
                return hidapi.read(serialData, wait);
            }
            if (magicRegexp.test(serialData)) {
                // find the position of the magic string
                var headerPosition = serialData.search(magic);
                // if the header is close enough to the end that the
                // command and content length could be cut off, go ahead
                // and get more data
                if (headerPosition >= (serialData.length - (64 - 48))) {
                    return hidapi.read(serialData, wait);
                }
                // command is the 2 bytes after the magic
                var command = serialData.substring(headerPosition + 4, headerPosition + 8);
                // payload size is 4 bytes after command
                var payloadSize = serialData.substring(headerPosition + 8, headerPosition + 16);
                // parse the hex number to decimal
                var decPayloadSize = parseInt(payloadSize, 16);
                // if the content length is longer than the rest of the
                // data, go get some more
                if ((headerPosition + 16 + (2 * decPayloadSize)) > serialData.length) {
                    return hidapi.read(serialData, wait);
                }
                // the payload will start after 8 bytes
                var payload = serialData.substring(headerPosition + 16, headerPosition + 16 + (2 * (decPayloadSize)));
                return hidapi.processResults(command, payloadSize, payload);
            } else if (!wait && serialData === "") { //If nothing is detected, close down port
                console.warn("Device unplugged");
                hidapi.close();
                return null;
            } else {
                return null;
            }
        }).finally(function() {
            hidapi.$scope.status = hidapi.STATUS_CONNECTED;
        });
    };

    HidAPI.prototype.processResults = function(command, length, payload) {
        var Device = this.protoBuilder();
        command = command.substring(2, 4);
        var data = {
            type: null,
            payload: {}
        };

        switch (command) {
        case "3A": // initialize
            data.type = HidAPI.TYPE_INITIALIZE;
            break;
        case "30": // public address
            data.type = HidAPI.TYPE_PUBLIC_ADDRESS;
            data.payload.ecdsa = payload.substring(8, 74);
            data.payload.ripe160of2 = payload.substring(78, 118);
            break;
        case "31": // number of addresses in loaded wallet
            data.type = HidAPI.TYPE_ADDRESS_COUNT;
            data.payload.count = payload.substring(2, 4);
            break;
        case "32": // Wallet list
            data.type = HidAPI.TYPE_WALLET_LIST;
            data.payload.wallets = Device.Wallets.decodeHex(payload).wallet_info;
            break;
        case "33": // Ping response
            data.type = HidAPI.TYPE_PONG;
            data.payload = Device.PingResponse.decodeHex(payload);
            break;
        case "34": // success
            data.type = HidAPI.TYPE_SUCCESS;
            break;
        case "35": // general purpose error/cancel
            data.type = HidAPI.TYPE_ERROR;
            var hidErr = Device.Failure.decodeHex(payload);
            data.payload = new Error(hidErr.error_message.toString('utf8'));
            data.payload.code = parseInt(hidErr.error_code, 10);
            break;
        case "36": // device uuid return
            data.type = HidAPI.TYPE_UUID;
            data.payload = Device.DeviceUUID.decodeHex(payload);
            break;
        case "39": // signature return [original]
            data.type = HidAPI.TYPE_SIGNATURE;
            data.payload = Device.Signature.decodeHex(payload);
            break;
        case "50": // please ack
            data.type = HidAPI.TYPE_PLEASE_ACK;
            break;
        case "56": // please otp
            data.type = HidAPI.TYPE_PLEASE_OTP;
            break;
        case "62": // parse & insert xpub from current wallet //RETURN from scan wallet
            data.type = HidAPI.TYPE_XPUB;
            data.payload = Device.CurrentWalletXPUB.decodeHex(payload);
            break;
        case "64": // signature return
            data.type = HidAPI.TYPE_SIGNATURE_RETURN;
            var signedScripts = [];
            var sigs = Device.SignatureComplete.decodeHex(payload).signature_complete_data;
            sigs.forEach(function(sig) {
                var sigHex = sig.signature_data_complete.toString('hex');
                var sigSize = parseInt(sigHex.slice(0, 2), 16);
                var sigChars = 2 + (sigSize * 2);
                sigHex = sigHex.slice(0, sigChars);
                signedScripts.push(sigHex);
            });
            data.payload = {
                signedScripts: signedScripts
            };
            break;
        case "71": // message signing return
            data.type = HidAPI.TYPE_MESSAGE_SIGNATURE;
            var protoSig = Device.SignatureMessage.decodeHex(payload).signature_data_complete;
            data.payload = this.hexUtil.hexToBytes(protoSig.toString('hex'));
            break;
        default:
            data.type = HidAPI.TYPE_ERROR;
            data.payload = new Error("Unknown command received: 00" + command);
            data.payload.code = 1;
            break;
        }
        return data;
    };

    HidAPI.prototype.close = function() {
        var hidapi = this;
        hidapi.$scope.status = null;
        hidapi._device = null;
        hidapi._plugin = null;
        console.debug("closed");
        return hidapi.$timeout(function() {
            console.debug("settng to disconnected");
            hidapi.$scope.status = hidapi.STATUS_DISCONNECTED;
        });
    };

    var readTimeout = 10;
    var counterMax = (120 * 1000) / readTimeout; // appx 2 minutes timeout

    HidAPI.prototype._doCommand = function(command, expectedType) {
        var hidapi = this;
        hidapi.doingCommand = true;
        return hidapi.write(command).then(function(written) {
            if (written === 0) {
                return hidapi.close().then(function() {
                    return hidapi.$q.reject(new Error("No data written"));
                });
            } else if (written === -1) {
                return hidapi.close().then(function() {
                    return hidapi.$q.reject(new Error("Write error"));
                });
            }
            var counter = 0;
            var doRead = function() {
                return hidapi.read('', 'wait please').then(function(data) {
                    counter += 1;
                    if (data === null) {
                        if (counter === counterMax) { // two minutes... ish
                            return hidapi.close().then(function() {
                                return hidapi.$q.reject(new Error("Command response timeout"));
                            });
                        }
                        return hidapi.$timeout(doRead, readTimeout);
                    } else if (data.type === HidAPI.TYPE_ERROR) {
                        hidapi.doingCommand = false;
                        return hidapi.$q.reject(data.payload);
                    } else if (data.type === HidAPI.TYPE_PLEASE_ACK) {
                        return hidapi._doCommand(hidapi.commands.button_ack, expectedType);
                    } else if (expectedType) {
                        if (data.type === expectedType) {
                            // we got what we wanted, return it
                            hidapi.doingCommand = false;
                            return data;
                        }
                        return hidapi.$timeout(doRead, readTimeout);
                    } else {
                        hidapi.doingCommand = false;
                        return data;
                    }
                });
            };
            return hidapi.$timeout(function(){})
                .then(doRead);
        }, function(err) {
            return hidapi.close().then(function() {
                return hidapi.$q.reject(err);
            });
        });
    };

    HidAPI.prototype.makeCommand = function(prefix, protoBuf) {
        var tmpBuf = protoBuf.encode();
        var messageHex = tmpBuf.toString('hex');
        var txSizeHex = (messageHex.length / 2).toString(16);
        while (txSizeHex.length < 8) {
            txSizeHex = "0" + txSizeHex;
        }
        return prefix + txSizeHex + messageHex;
    };

    // commands to be called from outside this file

    HidAPI.prototype.ping = function() {
        return this._doCommand(this.commands.ping, this.TYPE_PONG);
    };

    HidAPI.prototype.listWallets = function() {
        return this._doCommand(this.commands.list_wallets, this.TYPE_WALLET_LIST);
    };

    HidAPI.prototype.getWalletCommand = function(type, walletNumber) {
        var cmd = this.commands[type + 'WalletPrefix'];
        var numHex = parseInt(walletNumber, 10).toString(16);
        if (numHex.length === 1) {
            numHex = '0' + numHex;
        }
        return cmd + numHex;
    };

    HidAPI.prototype.loadWallet = function(walletNumber) {
        var cmd = this.getWalletCommand('load', walletNumber);
        return this._doCommand(cmd, this.TYPE_SUCCESS);
    };

    HidAPI.prototype.deleteWallet = function(walletNumber) {
        var cmd = this.getWalletCommand('delete', walletNumber);
        return this._doCommand(cmd, this.TYPE_PLEASE_OTP);
    };

    HidAPI.prototype.format = function() {
        return this._doCommand(this.commands.format_storage, this.TYPE_PLEASE_OTP);
    };

    HidAPI.prototype.scanWallet = function() {
        return this._doCommand(this.commands.scan_wallet, this.TYPE_XPUB);
    };

    HidAPI.prototype.newWallet = function(walletNumber, options) {
        var Device = this.protoBuilder();
        // look through the options and fill in the data for the proto
        // buffer
        var protoData = {};
        if (options.isSecure) {
            var pass = new ByteBuffer();
            pass.writeUint8(0x74);
            pass.flip();
            protoData.password = pass;
        } else {
            protoData.password = null;
        }
        protoData.is_hidden = options.isHidden ? true : false;
        // get the name and put it in a byte buffer
        var name =  "Wallet " + walletNumber;
        if (options.name && 'string' === typeof name) {
            name = options.name;
        }
        var nameHex = this.hexUtil.toPaddedHex(name, 39) + '00';
        var nameBuf = this.hexUtil.hexToByteBuffer(nameHex);
        nameBuf.flip();
        protoData.wallet_name = nameBuf;
        // make a proto buffer for the data, generate a command and
        // send it off
        var newWalletMessage = new Device.NewWallet(protoData);
        // if isRestore === true in the option, use the restor command
        // instead (everything else is the same)
        var cmdPrefix = (options.isRestore === true) ?
            this.commands.restoreWalletPrefix : this.commands.newWalletPrefix;
        // now make a full command using the proto buffer
        var cmd = this.makeCommand(cmdPrefix, newWalletMessage);
        return this._doCommand(cmd);
    };

    // tx is from bitcoin/transaction.factory.js
    HidAPI.prototype.signTransaction = function(tx) {
        var hidapi = this;
        var deferred = this.$q.defer();
        var Device = this.protoBuilder();
        var addrHandlers = [];
        var inputData = [];
        async.eachSeries(tx.inputs, function(input, next) {
            // make a handler
            var handler = hidapi.makeAddressHandler(input.chain, input.chainIndex);
            // add to the handler array
            addrHandlers.push(handler);
            // get the hex of the full input transaction
            hidapi.getTxHex(input.tx_hash_big_endian).then(function(hex) {
                var thisInputData = '01';
                thisInputData += hidapi.hexUtil.intToBigEndianString(input.tx_output_n, 4);
                thisInputData += hex;
                inputData.push(thisInputData);
                return next();
            }, next);
        }, function(err) {
            if (err) {
                return deferred.reject(err);
            }
            var dataString = '00';
            dataString += tx.unsignedHex;
            // hash type
            dataString += '01000000';
            dataString = inputData.join('') + dataString;

            var dataBuf = hidapi.hexUtil.hexToByteBuffer(dataString);
            dataBuf.flip();
            var txMessage = new Device.SignTransactionExtended({
                address_handle_extended: addrHandlers,
                transaction_data: dataBuf
            });
            var cmd = hidapi.makeCommand(hidapi.commands.signTxPrefix, txMessage);
            hidapi._doCommand(cmd, hidapi.TYPE_SIGNATURE_RETURN).then(deferred.resolve, deferred.reject);
        });
        return deferred.promise;
    };

    var sigHeaders = [
        "-----BEGIN BITCOIN SIGNED MESSAGE-----",
        "-----BEGIN SIGNATURE-----",
        "-----END BITCOIN SIGNED MESSAGE-----"
    ];

    HidAPI.prototype.signMessage = function(address, chain, chainIndex, message) {
        var hidapi = this;
        var Device = hidapi.protoBuilder();
        var messageBytes = hidapi.messageUtil.makeMessageBytes(message);
        var messageHex = hidapi.hexUtil.bytesToHex(messageBytes);
        var msgBuf = hidapi.hexUtil.hexToByteBuffer(messageHex);
        msgBuf.flip();
        console.debug("signMessage: ", message, "->", messageBytes, "->", messageHex);
        var protoMsg = new Device.SignMessage({
            address_handle_extended: hidapi.makeAddressHandler(chain, chainIndex),
            message_data: msgBuf
        });
        var cmd = hidapi.makeCommand(hidapi.commands.signMessagePrefix, protoMsg);
        return hidapi._doCommand(cmd, hidapi.TYPE_MESSAGE_SIGNATURE).then(function(data) {
            var sig = hidapi.messageUtil.processSignature(message, address, data.payload);
            if (!sig) {
                return hidapi.$q.reject(new Error("Invalid signature returned"));
            }
            return ([
                sigHeaders[0],
                message,
                sigHeaders[1],
                address,
                sig,
                sigHeaders[2]
            ]).join('\n');
        });
    };

    HidAPI.prototype.makeAddressHandler = function(chain, chainIndex) {
        var handler = {
            address_handle_root: 0,
            address_handle_chain: chain,
            address_handle_index: chainIndex
        };

        if (chain === 'receive') {
            handler.address_handle_chain = this.RECEIVE_CHAIN;
        } else if (chain === 'change') {
            handler.address_handle_chain = this.CHANGE_CHAIN;
        } else {
            throw new Error("Invalid chain on input: " + chain);
        }

        return handler;
    };

    HidAPI.prototype.renameWallet = function(name) {
        var Device = this.protoBuilder();
        var nameHex = this.hexUtil.toPaddedHex(name, 39) + '00';
        console.debug(name, "->", nameHex);
        var nameBuf = this.hexUtil.hexToByteBuffer(nameHex);
        nameBuf.flip();
        // make a proto buffer for the data, generate a command and
        // send it off
        var newWalletMessage = new Device.ChangeWalletName({
            wallet_name: nameBuf
        });
        var cmd = this.makeCommand(this.commands.renameWalletPrefix, newWalletMessage);
        return this._doCommand(cmd);
    };

    HidAPI.prototype.sendOTP = function(otp) {
        var Device = this.protoBuilder();
        var otpMessage = new Device.OtpAck({
            otp: otp,
        });
        var cmd = this.makeCommand(this.commands.otpPrefix, otpMessage);
        return this._doCommand(cmd);
    };

    HidAPI.prototype.showQr = function(chainIndex) {
        var Device = this.protoBuilder();
        var otpMessage = new Device.DisplayAddressAsQR({
            address_handle_index: chainIndex,
        });
        var cmd = this.makeCommand(this.commands.qrPrefix, otpMessage);
        var hidapi = this;
        return hidapi.write(cmd).then(function(written) {
            if (written === 0) {
                return hidapi.$q.reject(new Error("No data written"));
            } else if (written === -1) {
                return hidapi.$q.reject(new Error("Write error"));
            }
        });
    };

    HidAPI.prototype.setChangeAddress = function(chainIndex) {   
//     	console.debug("in setChangeAddress");
        var Device = this.protoBuilder();
        var otpMessage = new Device.SetChangeAddressIndex({
            address_handle_index: chainIndex,
        });
        var cmd = this.makeCommand(this.commands.setChangePrefix, otpMessage);
        var hidapi = this;
        return hidapi.write(cmd).then(function(written) {
            if (written === 0) {
                return hidapi.$q.reject(new Error("No data written"));
            } else if (written === -1) {
                return hidapi.$q.reject(new Error("Write error"));
            }
        });
    };



    HidAPI.prototype.flash = function() {
        var hidapi = this;
        var deferred = hidapi.$q.defer();
        hidapi.$timeout(function() {
            hidapi.device().hid_send_feature_report('01');
            deferred.resolve();
        });
        return deferred.promise;
    };

})(window, window.angular, window.async, window.dcodeIO.ProtoBuf, window.dcodeIO.ByteBuffer);

(function(window, angular) {
    'use strict';

    angular.module('hid')
        .directive('hidPlugin', plugin);

    plugin.$inject = ['$compile'];

    function plugin($compile) {
        return {
            restrict: 'E',
            link: function(scope, elm) {
                var plugintmpl = '<object height="1" id="hidapiPlugin" ' +
                    'type="application/x-hidapibrowserplugin" width="1">' +
                    '<param name="onload" value="pluginLoaded">' +
                    '</object>';
                var b = $compile(plugintmpl)(scope);
                elm.replaceWith(b);
            }
        };

    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.util')
        .factory('Cookie', CookieFactory);

    CookieFactory.$inject = ['ipCookie'];

    var DEFAULT_COOKIE_OPTIONS = {path: '/'};

    function CookieFactory(ipCookie) {
        var Cookie = {};

        Cookie.set = function(key, value, options) {
            options = makeOptions(options);
            return ipCookie(key, value, options);
        };

        Cookie.get = function(key) {
            return ipCookie(key);
        };

        Cookie.remove = function(key, options) {
            options = makeOptions(options);
            return ipCookie.remove(key, options);
        };

        function makeOptions(options) {
            if (!options || 'object' !== typeof options) {
                options = {};
            }
            return angular.extend(DEFAULT_COOKIE_OPTIONS, options);
        }

        return Cookie;
    }

})(window, window.angular);

(function(window, angular, Crypto, ByteBuffer, BigInteger) {
    'use strict';

    angular.module('app.util')
        .factory('hexUtil', HexFactory);

    HexFactory.$inject = [];

    function HexFactory() {
        return {
            // string to hex methods
            utf8ToHex: utf8ToHex,
            // alias this
            toHex: utf8ToHex,
            toPaddedHex: strToPaddedHex,
            // hex manipulation/conversion methods
            padBytes: padBytes,
            hexToByteBuffer: hexToByteBuffer,
            // hex values
            intToBigEndianValue: intToBigEndianValue,
            intToBigEndianString: intToBigEndianString,
            // byte to hex methods
            bytesToHex: bytesToHex,
            hexToBytes: hexToBytes,
            // make a big endian string small endian
            makeStringSmallEndian: makeStringSmallEndian
        };

        function strToPaddedHex(str, targetBytes, padByte) {
            return padBytes(utf8ToHex(str), targetBytes, padByte);
        }

        function utf8ToHex(str) {
		    return bytesToHex(Crypto.charenc.UTF8.stringToBytes(str));
        }

        function bytesToHex(bytes) {
		    return Crypto.util.bytesToHex(bytes);
        }

        function hexToBytes(hex) {
            return Crypto.util.hexToBytes(hex);
        }

        function padBytes(hex, targetBytes, padByte) {
            if (padByte === undefined) {
                padByte = '20';
            }
            if (padByte.length !== 2) {
                throw new Error("Invalid padding byte " + padByte);
            }
            if (isNaN(targetBytes)) {
                throw new Error("Invalid target bytes " + padByte);
            }
            while (hex.length < (targetBytes * 2)) {
                hex += padByte;
            }
            return hex;
        }

        function hexToByteBuffer(hex) {
            console.debug("converting", hex, "to byte buffer");
            var buf = new ByteBuffer();
            var hexLen = hex.length;
            for(var i = 0; i < hexLen; i+=2) {
                var value = hex.substring(i, i + 2);
                var result = parseInt(value, 16);
                buf.writeUint8(result);
            }
            return buf;
        }

        function intToBigEndianValue(n, minBytes) {
            n = BigInteger.valueOf(n);
            var value = n.toByteArrayUnsigned().reverse();
            while (value.length < minBytes) {
                value.push(0);
            }
            return value;
        }

        function intToBigEndianString(n, minBytes) {
            return bytesToHex(intToBigEndianValue(n, minBytes));
        }

        function makeStringSmallEndian(str) {
            var smallEndian = '';
            for (var i = (str.length - 2); i >= 0; i -= 2) {
                var byteChars = str.slice(i, i + 2);
                smallEndian += byteChars;
            }
            return smallEndian;
        }
    }

})(window, window.angular, window.Crypto, window.dcodeIO.ByteBuffer, window.BigInteger);

(function(window, angular) {
    'use strict';

    angular.module('app.util')
        .config(ToastConfig)
        .factory('Toast', ToastFactory);

    ToastConfig.$inject = ['ngToastProvider'];

    function ToastConfig(ngToast) {
        ngToast.configure({
            verticalPosition: 'bottom',
            horizontalPosition: 'center',
            animation: 'fade'
        });
    }

    ToastFactory.$inject = ['ngToast'];

    function ToastFactory(ngToast) {

        var Toast = function(){};

        var show = Toast.prototype.show = function(params) {
            ngToast.create(params);
        };

        Toast.prototype.clear = function(toast) {
            ngToast.dismiss(toast);
        };

        Toast.prototype.info = function(message) {
            this.show({
                content: message,
                className: 'info'
            });
        };

        Toast.prototype.error = function(message) {
            this.show({
                content: message,
                className: 'danger'
            });
        };

        Toast.prototype.errorHandler = function(err) {
            // this function is unbound, do not use 'this'
            show({
                content: err.message || err,
                className: 'danger'
            });
        };

        Toast.prototype.success = function(message) {
            this.show({
                content: message,
                className: 'success'
            });
        };

        Toast.prototype.warning = function(message) {
            this.show({
                content: message,
                className: 'warning'
            });
        };

        return new Toast();
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .directive('walletCreate', walletCreate);

    walletCreate.$inject = ['Wallet', 'Toast', 'BIP39WordList'];

    function walletCreate(Wallet, Toast, wordlist) {
        return {
            scope: {
                availableNumbers: '=',
                onFinish: '&',
            },
            templateUrl: 'wallet/create.html',
            link: function(scope) {

                reset();

                scope.createWallet = function() {
                    scope.creatingWallet = true;
                    Wallet.create(scope.newWallet.number, scope.newWallet).then(function() {
                        reset();
                        return scope.onFinish();
                    }, Toast.errorHandler).finally(function() {
                        scope.creatingWallet = false;
                    });
                };

                // wallets is on the parent scope, which this inherits
                scope.$watchCollection('availableNumbers', function(available) {
                    if (available && available.length) {
                        // also set some default values for that form
                        scope.newWallet.name = "Wallet " + available[0];
                        scope.newWallet.number = available[0];
                    }
                });

                scope.updateWordNumbers = function() {
                    if (!scope.userWords) {
                        return;
                    }
                    var words = scope.userWords.split(/\s+/);
                    var numbers = [];
                    for (var i = 0; i < words.length; i++) {
                        var word = words[i];
                        var wordIndex = wordlist.indexOf(word);
                        if (wordIndex < 0) {
                            numbers[i] = "INVALID WORD";
                        } else {
                            numbers[i] = wordIndex;
                        }
                    }
                    scope.wordIndexes = numbers;
                };

                function reset() {
                    scope.newWallet = {
                        name: "Wallet",
                        number: 0,
                        isSecure: true,
                        isHidden: false,
                        isRestore: false,
                    };
                }


            }
        };
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .directive('walletInfo', walletInfo);

    walletInfo.$inject = ['Toast'];

    function walletInfo(Toast) {
        return {
            scope: {
                wallet: '=',
                onDelete: '&',
                expertMode: '=',
            },
            templateUrl: 'wallet/info.html',
            link: function(scope) {
                scope.refreshBalance = function() {
                    scope.refreshingBalance = true;
                    scope.wallet.updateBalance().catch(Toast.errorHandler)
                        .finally(function() {
                            scope.refreshingBalance = false;
                        });
                };

                scope.refreshTransactions = function() {
                    scope.refreshingTransactions = true;
                    scope.wallet.loadTransactions().catch(Toast.errorHandler)
                        .finally(function() {
                            scope.refreshingTransactions = false;
                        });
                };

                scope.$watchCollection('wallet', function(v) {
                    if (v && v.balance !== undefined) {
                        scope.wallet.balance = v.balance;
                    }
                });
            }
        };
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .factory('WalletStatus', WalletStatusFactory);

    WalletStatusFactory.$inject = ['$rootScope'];

    function WalletStatusFactory($rootScope) {

        var $scope = $rootScope.$new();

        $scope.STATUS_LOADING_UNSPENT = "loading unspent";
        $scope.STATUS_LOADING_TRANSACTIONS = "loading transactions";
        $scope.STATUS_LOADING = "loading";
        $scope.STATUS_SENDING = "sending";
        $scope.STATUS_SIGNING = "signing";

        return $scope;

    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .directive('txInfoLink', txInfoLink);

    txInfoLink.$inject = [];

	var baseUrlroot = 'https://bitlox.io';

    function txInfoLink() {
        return {
            restrict: 'E',
//             template: '<a ng-href="https://blockchain.info/search/{{txid}}" target="_blank">{{display}}</a>',
            template: '<a ng-href="'+ baseUrlroot +'/tx/{{txid}}" target="_blank">{{display}}</a>',
            link: function(scope, elem, attrs) {
                var txid = scope.txid = attrs.txid;
                scope.display = txid.slice(0, 8) + '...' + txid.slice(txid.length - 9, txid.length - 1);
            }
        };
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .constant('MAX_WALLETS', 50);

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .controller('WalletCtrl', WalletCtrl);

    WalletCtrl.$inject = ['$timeout', 'MAX_WALLETS', 'Wallet', 'Toast', 'hidapi'];

    function WalletCtrl($timeout, MAX_WALLETS, Wallet, Toast, hidapi) {
        var vm = this;

        vm.readWallets = function() {
            vm.readingWallets = true;
            return Wallet.list()
                .then(function(wallets) {
                    vm.wallets = wallets;
                    vm.openWallet = null;
                    refreshAvailableNumbers(wallets);
                }, Toast.errorHandler)
                .finally(function() {
                    vm.readingWallets = false;
                });
        };

        vm.loadWallet = function(wallet) {
            vm.openWallet = null;
            vm.loadingXpub = true;
            console.debug("loading wallet", wallet.number);
            vm.openingWallet = wallet.number;
            wallet.open()
                .then(function() {
                    vm.openWallet = wallet;
                }, Toast.errorHandler, function(status) {
                    console.debug("open notify", status);
                    if (status === Wallet.NOTIFY_XPUB_LOADED) {
                        vm.loadingXpub = false;
                    }
                })
                .finally(function() {
                    console.debug("done loading wallet", wallet.number);
                    vm.openingWallet = -99;
                });
        };

        vm.refreshBalance = function() {
            vm.refreshingBalance = true;
            vm.openWallet.updateBalance().catch(Toast.errorHandler)
                .finally(function() {
                    vm.refreshingBalance = false;
                });
        };

        vm.directOpenNumber = 0;
        vm.directLoad = function() {
            var wallet;
            vm.wallets.forEach(function(w) {
                if (w.number === vm.directOpenNumber) {
                    wallet = w;
                }
            });
            if (!wallet) {
                wallet = new Wallet({
                    wallet_number: vm.directOpenNumber,
                    version: 4,
                    wallet_name: "HIDDEN",
                    wallet_uuid: "HIDDEN",
                });
            }
            vm.loadWallet(wallet);
        };

        vm.prepForFlash = function() {
            vm.flashing = true;
            hidapi.flash().catch(Toast.errorHandler)
                .finally(function() {
                    vm.flashing = false;
                });
        };



        reset();

        function refreshAvailableNumbers(wallets) {
            if (!wallets) {
                return;
            }
            // assemble array of wallet numbers
            var available = [];
            for(var i = 0; i < (MAX_WALLETS + 1); i++) {
                available.push(i);
            }
            // now loop through the wallets and remove existing
            // numbers
            wallets.forEach(function(wallet) {
                available.splice(available.indexOf(wallet.number), 1);
            });
            // set to the vm for the new wallet form
            vm.availableWalletNumbers = available;
        }

        function reset() {
            // status variables
            vm.readingWallets = true;
            vm.openingWallet = -99;
            vm.scanningWallet = false;
            vm.creatingWallet = false;
            vm.refreshingBalance = false;
            vm.openWallet = null;
            // read after a timeout, so angular does not hang and show
            // garbage while the browser is locked form readin the device
            $timeout(vm.readWallets.bind(vm), 100);
        }

    }

})(window, window.angular);

(function(window, angular, async) {
    'use strict';

    angular.module('app.wallet')
        .factory('Wallet', WalletFactory);

    WalletFactory.$inject = [
        '$q', '$timeout',
        'WalletStatus',
        'hidapi', 'BIP32', 'Transaction', 'addressInfo', 'MIN_OUTPUT', 'bcMath'];

    function WalletFactory(
        $q, $timeout,
        WalletStatus,
        hidapi, BIP32, Transaction, addressInfo, MIN_OUTPUT, bcMath) {

        var Wallet = function(data) {
            this.number = data.wallet_number;
            this.version = data.version;
            this._name = data.wallet_name;
            this._uuid = data.wallet_uuid;
            this.addresses = {
                receive: {},
                change: {}
            };
            this.balance = 0;
            this.unspent = [];
            this.transactions = [];
        };

        Wallet.NOTIFY_XPUB_LOADED = 'xpub loaded';

        Object.defineProperty(Wallet.prototype, 'name', {
            get: function() {
                if (!this._name || !this._name.toString) {
                    return "";
                }
                return this._name.toString("utf8");
            }
        });

        Object.defineProperty(Wallet.prototype, 'uuid', {
            get: function() {
                if (!this._uuid || !this._uuid.toString) {
                    return "";
                }
                return this._uuid.toString("utf8");
            }
        });

        Object.defineProperty(Wallet.prototype, 'isSecure', {
            get: function() {
                return this.version === 3;
            }
        });

        Object.defineProperty(Wallet.prototype, 'isHidden', {
            get: function() {
                return this.version === 4;
            }
        });

        Wallet.list = function() {
            return hidapi.listWallets().then(function(res) {
                var wallets = [];
                res.payload.wallets.forEach(function(data) {
                    wallets.push(new Wallet(data));
                });
                return wallets;
            });
        };

        Wallet.create = function(walletNumber, options) {
            return hidapi.newWallet(walletNumber, options);
        };

        // scan the currently open wallet and get the bip32 source key
        // from the data
        Wallet.getBip32 = function(wallet) {
            return hidapi.scanWallet().then(function(data) {
                var bip32;
                try {
                    bip32 = new BIP32(data.payload.xpub);
                } catch(ex) {
                    console.error(ex);
                    return $q.reject(ex);
                }
                wallet.xpub = data.payload.xpub;
                wallet.bip32 = bip32;
                // now that we have addresses, update the balance for
                // the wallet
                return wallet.updateBalance();
            });
        };

        Wallet.prototype.clearSpent = function(inputs) {
            var wallet = this;
            wallet.balance = 0;
            wallet.unspent = [];
            inputs.forEach(function(input) {
                var addrType = input.chain;
                var txid = input.tx_hash_big_endian;
                var addresses = wallet.addresses[addrType];
                Object.keys(addresses).forEach(function(address) {
                    var addrData = addresses[address];
                    var newUnspent = [];
                    addrData.unspent.forEach(function(output) {
                        if (txid !== output.tx_hash_big_endian) {
                            newUnspent.push(output);
                        }
                    });
                    addrData.unspent = newUnspent;
                });
                wallet.recalculateBalance(addrType);
            });
            // then also do a balance update after a timeout,
            // so we get the data we actually need for the
            // unspent outputs we have
            $timeout(function() {
                wallet.updatingBalance = true;
                wallet.updateBalance();
                wallet.loadTransactions();
            }, 5000);
        };

        // add up the unspent outputs on each input
        Wallet.prototype.recalculateBalance = function(addrType) {
            var wallet = this;
            var addresses = wallet.addresses[addrType];
            Object.keys(addresses).forEach(function(address) {
                var addrData = addresses[address];
                wallet.unconfirmedBalance += addrData.unconfirmedBalance;
                wallet.balance += addrData.balance;
            });
        };

        Wallet.prototype.getAllAddresses = function() {
            var wallet = this;
            var deferred = $q.defer();
            WalletStatus.status = WalletStatus.STATUS_LOADING_UNSPENT;
            async.each([
                "receive",
                "change"
            ], function(addrType, done) {
                var hasAll = false;
                var index = 0;
                console.debug("getting", addrType, "addresses");
                async.until(function() {
                    return hasAll;
                }, function(next) {
                    // generate the address for this index
                    var address = wallet.bip32.generateAddress(addrType, index);
                    address.chain = addrType;
                    address.chainIndex = index;
                    address.balance = 0;
                    address.unconfirmedBalance = 0;
                    // get the received amount for this address
                    addressInfo.getReceived(address.pub).then(function(received) {
                        address.received = received;
//                         address.balance = received.balance - (received.unconfirmed_sent || 0);
                        address.balance = received.balanceSat - (received.unconfirmedBalanceSat || 0);
                        if (address.balance < 0) {
                            address.balance = 0;
                        }
                        address.unconfirmedBalance = received.unconfirmedBalanceSat || 0;
                        if (address.unconfirmedBalance < 0) {
                            address.unconfirmedBalance = 0;
                        }
//                         if (received.received > 0 || received.unconfirmed_received > 0) {
                        if (received.totalReceivedSat > 0 || received.unconfirmedBalanceSat > 0) {
                            // increment the index for the next run
                            index += 1;
                            // and increment the bip key's address count
                            wallet.bip32.keyCount[addrType] += 1;
                            // add the address to the wallet
                            wallet.addresses[addrType][address.pub] = address;
                            // then continue, generating a new address
                            return next();
                            // if we have received anything, look for unspent outputs
                        } else {
                            // otherwise just set unspent to an empty
                            // array and move on.
                            address.unspent = [];
                            // set to true, to indicate that we do not
                            // need to generate any more addresses
                            hasAll = true;
                            // add the address to the wallet
                            wallet.addresses[addrType][address.pub] = address;
                            // then continue
                            if (addrType === 'receive') {
                                wallet.nextAddress = address;
                                hidapi.showQr(index);
                            }
                            if (addrType === 'change') {
//                                 wallet.nextAddress = address;
                                hidapi.setChangeAddress(index);
                            }
                            return next();
                        }
                    }, next); // pass in callback as promise failure function
                }, done);
            }, function(err) {
                if (err) {
                    return deferred.reject(err);
                }
                return deferred.resolve(wallet);
            });
            return deferred.promise;
        };

        Wallet.prototype.getUnspent = function() {
            var wallet = this;
            var deferred = $q.defer();
            wallet.unspent = [];
            async.each([
                "receive",
                "change"
            ], function(addrType, done) {
                async.forEachOf(wallet.addresses[addrType], function(address, _, next) {
//                     if (!address.received.received && !address.received.unconfirmed_received) {
                    if (!address.received.totalReceivedSat && !address.received.unconfirmedBalance) {
                        wallet.addresses[addrType][address.pub].unspent = [];
                        return next();
                    }
//                     var thisUnconfirmedSpent = (address.received.unconfirmed_balance + address.received.sent);
                    var thisUnconfirmedSpent = (address.received.unconfirmedBalance + address.received.totalSentSat);
                    if (thisUnconfirmedSpent < 0) {
                        wallet.addresses[addrType][address.pub].unspent = [];
                        return next();
                    }
                    addressInfo.getUnspent(address.pub).then(function(unspent) {
                        // assign the chain and chain index
                        // for each output for when we go to
                        // send
                        unspent.forEach(function(output) {
                            output.chain = addrType;
                            output.chainIndex = address.chainIndex;
                            wallet.unspent.push(output);
                        });
                        wallet.addresses[addrType][address.pub].unspent = unspent;
                        return next();
                    }, next); // pass in callback as promise failure function
                }, done);
            }, function(err) {
                if (err) {
                    return deferred.reject(err);
                }
                return deferred.resolve(wallet);
            });
            return deferred.promise;
        };

        Wallet.prototype.updateBalance = function() {
            var wallet = this;
            wallet.updatingBalance = true;
            wallet.balance = 0;
            wallet.unconfirmedBalance = 0;
            wallet.unspent = [];
            return wallet.getAllAddresses().then(function() {
                ["receive", "change"].forEach(wallet.recalculateBalance, wallet);
                return wallet;
            }).finally(function() {
                wallet.updatingBalance = false;
                WalletStatus.status = null;
            });
        };

        Wallet.prototype.open = function() {
            var wallet = this;
            WalletStatus.status = WalletStatus.STATUS_LOADING;
            var deferred = $q.defer();
            hidapi.loadWallet(this.number).then(function(data) {
                if (data.type !== hidapi.TYPE_SUCCESS) {
                    wallet.unlocked = false;
                    return deferred.reject("Error opening wallet");
                }
                deferred.notify(Wallet.NOTIFY_XPUB_LOADED);
                wallet.unlocked = true;
                // now that is is open, get the bip32 key for the
                // current wallet
                return Wallet.getBip32(wallet).then(function() {
                    wallet.loadTransactions();
                    return deferred.resolve(wallet);
                }, deferred.reject);
            }, deferred.reject);
            return deferred.promise;
        };


        Wallet.prototype.getChangeAddress = function() {
            var chAddr;
            var addresses = this.addresses.change;
            console.debug("Choosing change address");
            for (var address in addresses) {
                if (addresses.hasOwnProperty(address)) {
                    var received = addresses[address].received;
                    if (received.totalReceivedSat === 0 && received.unconfirmedBalance === 0) {
                        chAddr = address;
                    }
                }
            }
            return chAddr;
        };

        Wallet.prototype.showQr = function(chainIndex) {
        	return hidapi.showQr(chainIndex);
        };

        Wallet.prototype.setChangeAddress = function(chainIndex) {
        	return hidapi.setChangeAddress(chainIndex);
        };


        Wallet.prototype.send = function(outputs, fee, forceSmallChange) {
            WalletStatus.status = WalletStatus.STATUS_SENDING;
            var wallet = this;
            var deferred = $q.defer();
            try {
                console.debug("making transaction");
                var tx = new Transaction({
                    outputs: outputs,
                    fee: fee,
                    inputs: wallet.unspent,
                    changeAddress: wallet.getChangeAddress(),
                    forceSmallChange: forceSmallChange,
                });
                // do the send
                doSend(tx).then(deferred.resolve, deferred.reject);
                return deferred.promise.finally(function() {
                    WalletStatus.status = null;
                });
            } catch (ex) {
            	console.debug("caught exception in making transaction");
                if (ex === Transaction.ERR_AMOUNT_TOO_LOW) {
                    $timeout(function() {
                        deferred.reject("You cannot send less than " + bcMath.toBTC(MIN_OUTPUT) + " BTC");
                    });
                } else if (ex.change !== undefined && 'number' === typeof ex.change) {
                    $timeout(function() {
                        deferred.reject(ex);
                    });
                } else {
                    $timeout(function() {
                        deferred.reject(ex);
                    });
                }
                return deferred.promise;
            }
        };

        function doSend(tx) {
            console.debug("send: signing with device");
            // sign the transaction on the device
            return hidapi.signTransaction(tx)
                .then(function(res) {
                    // after signing, re4place the input scripts
                    // with the signed versions
                    console.debug("send: signed, replacing scripts");
                    tx.replaceScripts(res.payload.signedScripts);
                    // then submit it to the network
                    return tx;
                });
        }

        Wallet.prototype.signMessage = function(address, chain, chainIndex, message) {
            WalletStatus.status = WalletStatus.STATUS_SIGNING;
            return hidapi.signMessage(address, chain, chainIndex, message)
                .finally(function() {
                    WalletStatus.status = null;
                });
        };

        // renames the currently loaded wallet
        Wallet.prototype.rename = function(newName) {
            var wallet = this;
            return hidapi.renameWallet(newName).then(function() {
                console.debug(arguments);
                wallet._name = newName;
            });
        };

        Wallet.prototype.remove = function() {
            return hidapi.deleteWallet(this.number);
        };

        Wallet.prototype.removeConfirm = function(otp) {
            return hidapi.sendOTP(otp);
        };

//         Wallet.prototype.loadTransactions = function() {
//             WalletStatus.status = WalletStatus.STATUS_LOADING_TRANSACTIONS;
//             var transactions = [];
//             var foundHashes = [];
//             var wallet = this;
//             var deferred = $q.defer();
//             wallet.loadingTransactions = true;
//             async.each([
//                 "receive",
//                 "change"
//             ], function(addrType, done) {
//                 async.forEachOf(wallet.addresses[addrType], function(address, _, next) {
//                     if (!address.received.totalReceivedSat && !address.received.unconfirmedBalance) {
//                         return next();
//                     }
//                     addressInfo.getTransactions(address.pub).then(function(txs) {
//                         txs.forEach(function(tx) {
//                             if (foundHashes.indexOf(tx.hash) === -1) {
//                                 foundHashes.push(tx.hash);
//                                 transactions.push(tx);
//                             }
//                         });
//                         return next();
//                     }, next);
//                 }, done);
//             }, function(err) {
//                 if (err) {
//                     return deferred.reject(err);
//                 }
//                 transactions = transactions.sort(txSort).map(wallet.txMap.bind(wallet));
//                 wallet.transactions = transactions;
//                 WalletStatus.status = null;
//                 return deferred.resolve(transactions);
//             });
//             return deferred.promise.finally(function() {
//                 wallet.loadingTransactions = false;
//             });
//         };

        Wallet.prototype.loadTransactions = function() {
            WalletStatus.status = WalletStatus.STATUS_LOADING_TRANSACTIONS;
            var transactions = [];
            var foundHashes = [];
            var wallet = this;
            var deferred = $q.defer();
            wallet.loadingTransactions = true;
            async.each([
                "receive",
                "change"
            ], function(addrType, done) {
                async.forEachOf(wallet.addresses[addrType], function(address, _, next) {
                    if (!address.received.totalReceivedSat && !address.received.unconfirmedBalance) {
                        return next();
                    }
                    addressInfo.getTransactions(address.pub).then(function(txs) {
                        txs.forEach(function(tx) {
                            if (foundHashes.indexOf(tx.txid) === -1) {
                                foundHashes.push(tx.txid);
                                console.debug("foundHashes.push(tx.txid) " + tx.txid);
                                transactions.push(tx);
                            }
                        });
                        return next();
                    }, next);
                }, done);
            }, function(err) {
                if (err) {
                    return deferred.reject(err);
                }
                transactions = transactions.sort(txSort).map(wallet.txMap.bind(wallet));
                wallet.transactions = transactions;
                WalletStatus.status = null;
                return deferred.resolve(transactions);
            });
            return deferred.promise.finally(function() {
                wallet.loadingTransactions = false;
            });
        };


        function txSort(a, b) {
            return a.confirmations < b.confirmations ? -1 : 1;
        }

	// Assumes the amount is displayed as an eight-digit after the comma float (string)	
		function stringToSatoshis(amountAsString) {
			amountAsString = amountAsString.replace(/\./g,'');
			var amountAsInteger = 0;
			var i;
			var amountArray = amountAsString.split("");
			amountArray.reverse();
			for(i = 0; i < amountArray.length; i++)
			{
				amountAsInteger = amountAsInteger + ((parseInt(amountArray[i]))*(Math.pow(10,i)));
			}
			return amountAsInteger;
		}



//         Wallet.prototype.txMap = function(tx) {
//             tx.type = 'send';
//             var wallet = this;
//             tx.totalAmount = tx.amount;
//             var ownAddresses = 0;
//             var addrCount = 0;
//             tx.outputs.forEach(function(out) {
//                 out.addresses.forEach(function(addr) {
//                     addrCount += 1;
//                     if (wallet.addresses.receive.hasOwnProperty(addr)) {
//                         tx.type = 'receive';
//                         ownAddresses += 1;
//                     } else if (wallet.addresses.change.hasOwnProperty(addr)) {
//                         ownAddresses += 1;
//                         tx.amount -= out.amount;
//                     }
//                 });
//             });
//             if (ownAddresses === addrCount) {
//                 tx.type = 'transfer';
//             }
//             if (tx.type === 'receive') {
//                 tx.outputs.forEach(function(out) {
//                     out.addresses.forEach(function(addr) {
//                         if (!wallet.addresses.receive.hasOwnProperty(addr) &&
//                             !wallet.addresses.change.hasOwnProperty(addr)) {
//                             tx.amount -= out.amount;
//                         }
//                     });
//                 });
//             }
//             return tx;
//         };

        Wallet.prototype.txMap = function(tx) {
            tx.type = 'send';
            var wallet = this;
            tx.totalAmount = tx.valueOut * 100000000;
            var ownAddresses = 0;
            var addrCount = 0;
            tx.vout.forEach(function(out) {
                out.scriptPubKey.addresses.forEach(function(addr) {
                    addrCount += 1;
                    if (wallet.addresses.receive.hasOwnProperty(addr)) {
                        tx.type = 'receive';
                        ownAddresses += 1;
                    } else if (wallet.addresses.change.hasOwnProperty(addr)) {
                        ownAddresses += 1;
                        console.debug("S out.value " + out.value);
                        console.debug("S stringToSatoshis(out.value) " + stringToSatoshis(out.value));
                        var stsS = stringToSatoshis(out.value);
						var epochDate = 0;
						if (tx.confirmations > 0) {
							epochDate = tx.blocktime*1000;
						}else{
							epochDate = tx.time*1000;
						}
						tx.blocktime = moment(epochDate).format("YYYY-MM-DD HH:mm");
                        tx.amount = stsS;
                        tx.fees = tx.fees * 100000000;
                        console.debug("S tx.fees " + tx.fees);
                    }
                });
            });
            if (ownAddresses === addrCount) {
                tx.type = 'transfer';
                console.debug("T tx.fees " + tx.fees);
            }
            if (tx.type === 'receive') {
                tx.vout.forEach(function(out) {
                    out.scriptPubKey.addresses.forEach(function(addr) {
                    	console.debug("R addr " + addr);
                        if (wallet.addresses.receive.hasOwnProperty(addr)) {
							console.debug("R out.value " + out.value);
							console.debug("R stringToSatoshis(out.value) " + stringToSatoshis(out.value));
                        	var stsR = 0;
                        	stsR = stringToSatoshis(out.value);
                        	var epochDate2 = 0;
							if (tx.confirmations > 0) {
								epochDate2 = tx.blocktime*1000;
							}else{
								epochDate2 = tx.time*1000;
							}
							tx.blocktime = moment(epochDate2).format("YYYY-MM-DD HH:mm");
                            tx.amount = stsR;
                            console.debug("R tx.amount " + tx.amount);
                        }
                    });
                });
            }
            return tx;
        };

        return Wallet;

    }

})(window, window.angular, window.async);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .config(config);

    config.$inject = ['$routeProvider'];

    function config($routeProvider) {
        $routeProvider.when('/', {
            controller: 'WalletCtrl',
            controllerAs: 'vm',
            templateUrl: 'wallet/wallets.html'
        });
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .directive('walletAddresses', walletAddresses);

    walletAddresses.$inject = ['Toast'];

    function walletAddresses(Toast) {
        return {
            templateUrl: 'wallet/info/addresses.html',
            link: function(scope) {
                // size of address QR codes
                scope.qrsize = 120;
                // will hold truthy values to show individual QR codes
                // for the addresses
                scope.showqr = {};

                scope.showQr = function(address, chainIndex, addrType) {
                    scope.showqr[address] = !scope.showqr[address];
                    if (addrType === 'receive') {
                        scope.wallet.showQr(chainIndex).catch(Toast.errorHandler);
                    }
                };
            }
        };
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .directive('walletDelete', walletDelete);

    walletDelete.$inject = ['Wallet', 'Toast', 'hidapi'];

    function walletDelete(Wallet, Toast, hidapi) {
        return {
            scope: {
                wallet: '=',
                onDelete: '&',
            },
            templateUrl: 'wallet/info/delete.html',
            link: function(scope) {
                scope.deleteWallet = function() {
                    scope.deletingWallet = true;
                    scope.wallet.remove().then(function() {
                        scope.otpRequested = true;
                    }, Toast.errorHandler).finally(function() {
                        scope.deleteingWallet = false;
                    });
                };

                scope.formatDevice = function() {
                    scope.formatting = true;
                    hidapi.format().then(function() {
                        scope.otpRequested = true;
                    }, Toast.errorHandler).finally(function() {
                        scope.formatting = false;
                    });
                };

                scope.sendOtp = function() {
                    scope.sendingOtp = true;
                    scope.wallet.removeConfirm(scope.otp).then(function() {
                        scope.onDelete();
                    }, Toast.errorHandler).finally(function() {
                        scope.otpRequested = false;
                        scope.sendingOtp = false;
                    });
                };
            }
        };
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .directive('walletRename', walletRename);

    walletRename.$inject = ['Wallet', 'Toast'];

    function walletRename(Wallet, Toast) {
        return {
            templateUrl: 'wallet/info/rename.html',
            link: function(scope) {
                reset();

                scope.renameWallet = function() {
                    scope.renamingWallet = true;
                    scope.wallet.rename(scope.newName).then(function() {
                        reset();
                    }, Toast.errorHandler).finally(function() {
                        scope.renamingWallet = false;
                    });
                };

                function reset() {
                    scope.newName = "";
                }
            }
        };
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .directive('walletSend', walletSend);

    walletSend.$inject = ['DEFAULT_FEE', 'MIN_OUTPUT', 'Toast', 'txUtil'];

    function walletSend(DEFAULT_FEE, MIN_OUTPUT, Toast, txUtil) {
        return {
            templateUrl: 'wallet/info/send.html',
            link: function(scope) {

                scope.DEFAULT_FEE = DEFAULT_FEE;
                scope.MIN_OUTPUT = MIN_OUTPUT;

                scope.reset = function() {
                    scope.outputs = [{
                        address: "",
                        amount: 0
                    }];
                    scope.fee = DEFAULT_FEE;
                    scope.signedHex = null;
                };

                scope.addOutput = function(index) {
                    if (index === undefined) {
                        index = scope.outputs.length - 1;
                    }
                    scope.outputs.splice(index + 1, 0, {
                        address: "",
                        amount: 0
                    });
                };

                scope.removeOutput = function(index) {
                    scope.outputs.splice(index, 1);
                };

                scope.send = function() {
                    scope.dust = 0;
                    scope.updatingBalance = true;
                    scope.wallet.getUnspent().then(function() {
                        scope.doSend();
                    }, Toast.errorHandler).finally(function() {
                        scope.updatingBalance = false;
                    });
                };

                scope.amountChanged = function() {
                    var total = 0;
                    scope.outputs.forEach(function(output) {
                        total += output.amount;
                    });
                    if ((total + scope.fee) > (scope.wallet.balance + scope.wallet.unconfirmedBalance)) {
                        scope.totalTooHigh = true;
                    } else {
                        scope.totalTooHigh = false;
                    }
                    if (scope.totalTooHigh) {
                        scope.totalExceedsConfirmed = false;
                    } else if ((total + scope.fee) > scope.wallet.balance) {
                        scope.totalExceedsConfirmed = true;
                    } else {
                        scope.totalExceedsConfirmed = false;
                    }
                };

                scope.doSend = function(forceSmallChange) {
                    scope.sending = true;
                    return scope.wallet.send(scope.outputs, scope.fee, forceSmallChange)

                        .then(function(tx) {
                            scope.tx = tx;
                            scope.signedHex = tx.signedHex;
                            if (scope.expertMode) {
                                Toast.success("Transaction signed. Review and confirm.");
                            } else {
                                scope.submit();
                            }
                        }, function(err) {
                            if ('number' === typeof err.change) {
                                scope.dust = err.change;
                            } else {
                                Toast.errorHandler(err);
                            }
                        })

                        .finally(function() {
                            scope.sending = false;
                        });
                };

                scope.smallChangeToFee = function() {
                    var dust = scope.dust;
                    scope.fee += dust;
                    scope.doSend().finally(function() {
                        scope.dust = 0;
                    });
                };

                scope.smallChangeLowerFee = function() {
                    var dust = scope.dust;
                    scope.fee -= (MIN_OUTPUT - dust);
                    scope.doSend().finally(function() {
                        scope.dust = 0;
                    });
                };

                scope.smallChangeForce = function() {
                    scope.doSend('force it').finally(function() {
                        scope.dust = 0;
                    });
                };

                scope.submit = function() {
                    scope.submitting = true;
                    console.debug("scope.signedHex to submit: " + scope.signedHex);
                    txUtil.submit(scope.signedHex)

                        .then(function() {
                            scope.wallet.clearSpent(scope.tx.inputs);
                            scope.signedHex = null;
                            scope.tx = null;
                            scope.reset();
                            if (scope.expertMode) {
                                Toast.success("Transaction submitted to network");
                            } else {
                                Toast.success("Transaction success");
                            }
                        }, Toast.errorHandler)

                        .finally(function() {
                            scope.submitting = false;
                        });
                };

                scope.reset();
            }
        };
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .directive('walletSign', walletSign);

    walletSign.$inject = ['Toast'];

    function walletSign(Toast) {
        return {
            templateUrl: 'wallet/info/sign.html',
            link: function(scope) {

                scope.message = "";
                scope.address = null;
                scope.signed = null;

                scope.sign = function() {
                    scope.signed = null;
                    scope.signing = true;
                    scope.wallet.signMessage(scope.address.pub,
                                             scope.address.chain,
                                             scope.address.chainIndex,
                                             scope.message)
                        .then(function(signed) {
                            scope.signed = signed;
                        }, Toast.errorHandler)
                        .finally(function() {
                            scope.signing = false;
                        });
                };

                scope.$watchCollection('wallet', function(wallet) {
                    if (!wallet) {
                        return;
                    }
                    var addressList = [];
                    var addresses = wallet.addresses.receive;
                    Object.keys(addresses).forEach(function(address) {
                        address = addresses[address];
                        // make a new object, because the BIP32
                        // object causes errors.. something
                        // something circular object
                        addressList.push({
                            chain: address.chain,
                            chainIndex: address.chainIndex,
                            pub: address.pub
                        });
                    });
                    scope.addresses = addressList;
                    if (!scope.address) {
                        scope.address = addressList[0];
                    }
                });


            }
        };
    }

})(window, window.angular);

(function(window, angular) {
    'use strict';

    angular.module('app.wallet')
        .directive('walletTransactions', walletTransactions);

    walletTransactions.$inject = [];

    function walletTransactions() {
        return {
            restrict: 'E',
            templateUrl: 'wallet/info/transactions.html',
            link: function(scope) {
                var pageSize = scope.pageSize = 10;

                scope.$watchCollection('wallet.transactions', function(txs) {
                    if (txs && Array.isArray(txs) && txs.length) {
                        var page = scope.page = 1;
                        scope.transactions = makeTxSlice(page, txs);
                    }
                });

                scope.pageChange = function() {
                    scope.transactions = makeTxSlice(scope.page, scope.wallet.transactions);
                };

                function makeTxSlice(page, txs) {
                    var startIndex = pageSize * (page - 1);
                    var endIndex = startIndex + pageSize;
                    return txs.slice(startIndex, endIndex);
                }

            }
        };
    }

})(window, window.angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
